//==================================================================================================
// 
// Generated Map Script
// 
// Name:   Just Another StarCraft II Map
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_removeunittype_kill = 0;
const int lib1_ge_removeunittype_remove = 1;
const int lib1_ge_race_protoss = 0;
const int lib1_ge_race_terran = 1;
const int lib1_ge_race_zerg = 2;

// Constants
const int lib1_gv_anyplayer = 16;
const string lib1_gv_emptystring = "";
const string lib1_gv_nogamelinkunittype = null;

// Structures
struct lib1_gs_debouncedmessage {
    text lv_message;
    int lv_insertedattimeint;
    int lv_secondstodebounce;
    string lv_id;
};

// Variable Declarations
unit[17][3] lib1_gv_selectedunits;
lib1_gs_debouncedmessage[101] lib1_gv_debouncedmessages;
string[5] lib1_gv_direction4;
text lib1_gv_colorcalamity;
text lib1_gv_colorsuccess;
timer lib1_gv_everysecond;
bool lib1_gv_localdebug;
int[17] lib1_gv_randomindices;
bool lib1_gv_test;
bool lib1_gv_testmultiplayerlocally;
int lib1_gv_testmultiplayerlocallynumplayers;
string[9] lib1_gv_testmultiplayerlocallyraces;
unitgroup[17][17] lib1_gv_unitsingroupsofNperplayer;

// Function Declarations
bool lib1_gf_and2 (bool lp_left, bool lp_right);
unit lib1_gf_anyunitatpointforplayer (point lp_p, int lp_player);
unit lib1_gf_anyunitnearpointforplayer (point lp_point, int lp_player);
bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_isemptystring (string lp_str);
bool lib1_gf_istrue (bool lp_b);
bool lib1_gf_isfalse (bool lp_b);
bool lib1_gf_isdebugginglocally ();
bool lib1_gf_istesting ();
bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt);
bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2);
bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3);
bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg);
bool lib1_gf_timerisactive (timer lp_t);
bool lib1_gf_timerisnotactive (timer lp_t);
bool lib1_gf_triggeringplayerhasatleastNresources (int lp_mins, int lp_gas);
bool lib1_gf_triggeringunitbelongstoplayergroup (playergroup lp_pg);
bool lib1_gf_triggeringunitbelongstoplayer (int lp_p);
bool lib1_gf_triggeringunitisoftype (string lp_t);
bool lib1_gf_unithasbuff (unit lp_u, string lp_b);
bool lib1_gf_unitisalive (unit lp_u);
bool lib1_gf_unitistype (unit lp_u, string lp_ut);
bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool);
text lib1_gf_convertbooltoonoff (bool lp_bool);
unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p);
int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype);
text lib1_gf_getabililtystageastext (int lp_stage);
int lib1_gf_getcurrenttimeint ();
text lib1_gf_getplayerraceastext (int lp_p);
int lib1_gf_getraceintegerfromplayer (int lp_p);
int lib1_gf_getracepresetfromplayer (int lp_p);
int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t);
int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p);
int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p);
point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z);
unit lib1_gf_previousselectedunit (int lp_p);
unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut);
void lib1_gf_alertplayernotenoughminerals (int lp_p);
void lib1_gf_alertplayererror (int lp_p, text lp_err);
void lib1_gf_cleartextmessageareaforallusers (int lp_messagearea);
void lib1_gf_cleartextmessageareaforuser (int lp_p, int lp_messagearea);
void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts);
void lib1_gf_createunitatrandompointinregion (string lp_ut, region lp_r, int lp_player, int lp_opts);
void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player, int lp_opts);
void lib1_gf_createNunitsatrandompointsinregion (int lp_n, string lp_ut, region lp_r, int lp_player, int lp_opts);
void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage);
void lib1_gf_debouncedmessageremove (string lp_id);
void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i);
void lib1_gf_displaydebugmessage (text lp_msg);
void lib1_gf_endgameforplayergroup (playergroup lp_pg, int lp_gameovertype);
void lib1_gf_initdirection4 ();
void lib1_gf_initeverysecondtimer ();
void lib1_gf_initlocaldebuggingstate ();
void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_messageuser (text lp_msg, int lp_p);
void lib1_gf_messageallusers (text lp_msg);
void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce);
void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int);
void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_pancameratopointforplayerasync (int lp_player, point lp_point);
void lib1_gf_pancameratopointforplayergroup (playergroup lp_pg, point lp_point);
void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p);
void lib1_gf_playsoundforallplayers (soundlink lp_s);
void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p);
void lib1_gf_printtriggeringabilitystage ();
void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p);
void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype);
void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut);
void lib1_gf_resetunitsingroupsofNforplayer (int lp_p);
void lib1_gf_selectanyunitatpointforplayer (point lp_point, int lp_player);
void lib1_gf_selectanyunitnearpointforplayer (point lp_point, int lp_player);
void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_setrandomindices (int lp_size);

// Trigger Declarations
trigger lib1_gt_continueeverysecondtimer;
trigger lib1_gt_displaydebouncedmessagetoallusers;
trigger lib1_gt_trackpreviousselectedunit;
trigger lib1_gt_utilsinitmap;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= 100; init_i += 1) {
        lib1_gv_debouncedmessages[init_i].lv_id = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1_gv_direction4[init_i] = "";
    }
    lib1_gv_colorcalamity = StringExternal("Param/Value/lib_1_4A35FBAD");
    lib1_gv_colorsuccess = StringExternal("Param/Value/lib_1_1BE6C03F");
    lib1_gv_everysecond = TimerCreate();
    lib1_gv_localdebug = true;
    lib1_gv_test = true;
    lib1_gv_testmultiplayerlocally = true;
    lib1_gv_testmultiplayerlocallynumplayers = 8;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib1_gv_testmultiplayerlocallyraces[init_i] = "Terr";
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_unitsingroupsofNperplayer[init_i][init_j] = UnitGroupEmpty();
        }
    }
}

// Presets
// Functions
bool lib1_gf_and2 (bool lp_left, bool lp_right) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_left && lp_right);
}

unit lib1_gf_anyunitatpointforplayer (point lp_p, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(null, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

unit lib1_gf_anyunitnearpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupClosestToPoint(UnitGroupSearch(null, lp_player, lp_point, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point);
}

bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) >= lp_n);
}

bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < lp_n);
}

bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) < lp_n);
}

bool lib1_gf_isemptystring (string lp_str) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_str == lib1_gv_emptystring);
}

bool lib1_gf_istrue (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return lp_b;
}

bool lib1_gf_isfalse (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return !(lp_b);
}

bool lib1_gf_isdebugginglocally () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_istrue(lib1_gv_localdebug);
}

bool lib1_gf_istesting () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_istrue(lib1_gv_test);
}

bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitInRegion(lp_u, RegionCircle(lp_pt, lp_d));
}

bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2);
}

bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2 || lp_bool3);
}

bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupHasPlayer(lp_pg, lp_p);
}

bool lib1_gf_timerisactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) > 0.0);
}

bool lib1_gf_timerisnotactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) <= 0.0);
}

bool lib1_gf_triggeringplayerhasatleastNresources (int lp_mins, int lp_gas) {
    // Automatic Variable Declarations
    // Implementation
    return AIHasRes(EventPlayer(), lp_mins, lp_gas);
}

bool lib1_gf_triggeringunitbelongstoplayergroup (playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    return PlayerGroupHasPlayer(lp_pg, UnitGetOwner(EventUnit()));
}

bool lib1_gf_triggeringunitbelongstoplayer (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetOwner(EventUnit()) == lp_p);
}

bool lib1_gf_triggeringunitisoftype (string lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetType(EventUnit()) == lp_t);
}

bool lib1_gf_unithasbuff (unit lp_u, string lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior2(lp_u, lp_b);
}

bool lib1_gf_unitisalive (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitIsAlive(lp_u) == true);
}

bool lib1_gf_unitistype (unit lp_u, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetType(lp_u) == lp_ut);
}

bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool) {
    // Automatic Variable Declarations
    bool auto0E8CD9BC_val;

    // Implementation
    auto0E8CD9BC_val = lp_bool;
    if (auto0E8CD9BC_val == true) {
        return true;
    }
    else {
        return false;
    }
}

text lib1_gf_convertbooltoonoff (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lp_bool)) {
        return StringExternal("Param/Value/lib_1_EE7F86C0");
    }
    else {
        return StringExternal("Param/Value/lib_1_33A9FDCD");
    }
}

unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroup(lp_unittype, lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype) {
    // Variable Declarations
    int lv__numunits;
    int lv__numgroups;
    int lv__group;
    int lv__i;
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto3C360D04_g;
    int auto3C360D04_u;

    // Variable Initialization

    // Implementation
    lv__numunits = lib1_gf_numberofunitsoftypeinregion(lp_r, lp_p, lp_unittype);
    lv__numgroups = FloorI((lv__numunits / lp_n));
    if ((lv__numgroups >= 1)) {
        lib1_gf_resetunitsingroupsofNforplayer(lp_p);
        auto3C360D04_g = UnitGroup(lp_unittype, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C360D04_u = UnitGroupCount(auto3C360D04_g, c_unitCountAll);
        for (;; auto3C360D04_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto3C360D04_g, auto3C360D04_u);
            if (lv__u == null) { break; }
            lv__group = FloorI((lv__i / lp_n));
            UnitGroupAdd(lib1_gv_unitsingroupsofNperplayer[lp_p][lv__group], lv__u);
            lv__i = (lv__i + 1);
        }
    }

    return lv__numgroups;
}

text lib1_gf_getabililtystageastext (int lp_stage) {
    // Automatic Variable Declarations
    int auto7C5C3079_val;

    // Implementation
    auto7C5C3079_val = lp_stage;
    if (auto7C5C3079_val == c_abilRallyStagePlace) {
        return StringExternal("Param/Value/lib_1_B1A9A0BE");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverEnd) {
        return StringExternal("Param/Value/lib_1_C0E52566");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverStart) {
        return StringExternal("Param/Value/lib_1_AE6CBCB1");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsEnd) {
        return StringExternal("Param/Value/lib_1_94141FDC");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsStart) {
        return StringExternal("Param/Value/lib_1_315E0491");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitEnd) {
        return StringExternal("Param/Value/lib_1_875ED7AF");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitStart) {
        return StringExternal("Param/Value/lib_1_76371732");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingEnd) {
        return StringExternal("Param/Value/lib_1_8845F40E");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingStart) {
        return StringExternal("Param/Value/lib_1_9BA4458C");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideEnd) {
        return StringExternal("Param/Value/lib_1_E222F185");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideStart) {
        return StringExternal("Param/Value/lib_1_96D523DB");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsEnd) {
        return StringExternal("Param/Value/lib_1_9AF529AD");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsStart) {
        return StringExternal("Param/Value/lib_1_693AB5CA");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorEnd) {
        return StringExternal("Param/Value/lib_1_B515E506");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorStart) {
        return StringExternal("Param/Value/lib_1_3022E928");
    }
    else if (auto7C5C3079_val == c_abilMorphStageWait) {
        return StringExternal("Param/Value/lib_1_92C481D4");
    }
    else if (auto7C5C3079_val == c_abilMorphStageApproach) {
        return StringExternal("Param/Value/lib_1_82D59DD9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageDropOff) {
        return StringExternal("Param/Value/lib_1_48441561");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachDropOff) {
        return StringExternal("Param/Value/lib_1_BF2D00E9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitForDropOff) {
        return StringExternal("Param/Value/lib_1_411DDC33");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitToReturn) {
        return StringExternal("Param/Value/lib_1_FF091B5E");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageHarvest) {
        return StringExternal("Param/Value/lib_1_222792E0");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitAtResource) {
        return StringExternal("Param/Value/lib_1_89DBB633");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachResource) {
        return StringExternal("Param/Value/lib_1_367C28A1");
    }
    else if (auto7C5C3079_val == c_unitAbilStageUnpause) {
        return StringExternal("Param/Value/lib_1_79353442");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePause) {
        return StringExternal("Param/Value/lib_1_8FB28264");
    }
    else if (auto7C5C3079_val == c_unitAbilStageComplete) {
        return StringExternal("Param/Value/lib_1_0D4B38C5");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePreempt) {
        return StringExternal("Param/Value/lib_1_ACFCE4F5");
    }
    else if (auto7C5C3079_val == c_unitAbilStageCancel) {
        return StringExternal("Param/Value/lib_1_D41AC1FC");
    }
    else if (auto7C5C3079_val == c_unitAbilStageExecute) {
        return StringExternal("Param/Value/lib_1_E19B5790");
    }
    else if (auto7C5C3079_val == c_unitAbilStageQueue) {
        return StringExternal("Param/Value/lib_1_5C203FFD");
    }
    else if (auto7C5C3079_val == c_unitAbilStageAll) {
        return StringExternal("Param/Value/lib_1_C0FADEC6");
    }
    else if (auto7C5C3079_val == c_abilEffectStageBail) {
        return StringExternal("Param/Value/lib_1_AC409659");
    }
    else if (auto7C5C3079_val == c_abilEffectStageFinish) {
        return StringExternal("Param/Value/lib_1_F8914108");
    }
    else if (auto7C5C3079_val == c_abilEffectStageChannel) {
        return StringExternal("Param/Value/lib_1_C807DFC8");
    }
    else if (auto7C5C3079_val == c_abilEffectStageCast) {
        return StringExternal("Param/Value/lib_1_2C79D0B3");
    }
    else if (auto7C5C3079_val == c_abilEffectStagePrep) {
        return StringExternal("Param/Value/lib_1_A3DCFA2F");
    }
    else if (auto7C5C3079_val == c_abilEffectStageApproach) {
        return StringExternal("Param/Value/lib_1_36F8FDEE");
    }
    else if (auto7C5C3079_val == c_abilBuildStageCollide) {
        return StringExternal("Param/Value/lib_1_1660F597");
    }
    else if (auto7C5C3079_val == c_abilBuildStageFinish) {
        return StringExternal("Param/Value/lib_1_2E58CBA2");
    }
    else if (auto7C5C3079_val == c_abilBuildStageResume) {
        return StringExternal("Param/Value/lib_1_F40CAC62");
    }
    else if (auto7C5C3079_val == c_abilBuildStageHalt) {
        return StringExternal("Param/Value/lib_1_CEBB5E3B");
    }
    else if (auto7C5C3079_val == c_abilBuildStageConstruct) {
        return StringExternal("Param/Value/lib_1_7923C72E");
    }
    else if (auto7C5C3079_val == c_abilBuildStageWait) {
        return StringExternal("Param/Value/lib_1_CA9D1B07");
    }
    else if (auto7C5C3079_val == c_abilBuildStageApproach) {
        return StringExternal("Param/Value/lib_1_4134203F");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageToggled) {
        return StringExternal("Param/Value/lib_1_6D6E5434");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageUntoggled) {
        return StringExternal("Param/Value/lib_1_78B24B45");
    }
    else if (auto7C5C3079_val == c_abilAttackStageLoiter) {
        return StringExternal("Param/Value/lib_1_DDF50FE4");
    }
    else if (auto7C5C3079_val == c_abilAttackStageAttack) {
        return StringExternal("Param/Value/lib_1_41418C08");
    }
    else if (auto7C5C3079_val == c_abilAttackStageApproach) {
        return StringExternal("Param/Value/lib_1_7E513C70");
    }
    else {
        return StringExternal("Param/Value/lib_1_0DDB8C11");
    }
}

int lib1_gf_getcurrenttimeint () {
    // Automatic Variable Declarations
    // Implementation
    return DateTimeToInt(CurrentDateTimeGet());
}

text lib1_gf_getplayerraceastext (int lp_p) {
    // Automatic Variable Declarations
    string autoDDE34797_val;

    // Implementation
    autoDDE34797_val = PlayerRace(lp_p);
    if (autoDDE34797_val == "Prot") {
        return StringExternal("Param/Value/lib_1_4B0781BB");
    }
    else if (autoDDE34797_val == "Terr") {
        return StringExternal("Param/Value/lib_1_96CA8A61");
    }
    else if (autoDDE34797_val == "Zerg") {
        return StringExternal("Param/Value/lib_1_45CC7D05");
    }
    else {
        return StringExternal("Param/Value/lib_1_28EC086C");
    }
}

int lib1_gf_getraceintegerfromplayer (int lp_p) {
    // Variable Declarations
    int lv__race;

    // Automatic Variable Declarations
    string autoC73756C2_val;

    // Variable Initialization

    // Implementation
    autoC73756C2_val = PlayerRace(lp_p);
    if (autoC73756C2_val == "Prot") {
        return lib1_ge_race_protoss;
    }
    else if (autoC73756C2_val == "Terr") {
        return lib1_ge_race_terran;
    }
    else if (autoC73756C2_val == "Zerg") {
        return lib1_ge_race_zerg;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_0137C127", "p", IntToText(lp_p));
        lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_0137C127"));
        return -1;
    }
}

int lib1_gf_getracepresetfromplayer (int lp_p) {
    // Variable Declarations
    int lv__race;

    // Automatic Variable Declarations
    string auto5DB55850_val;

    // Variable Initialization

    // Implementation
    auto5DB55850_val = PlayerRace(lp_p);
    if (auto5DB55850_val == "Prot") {
        return lib1_ge_race_protoss;
    }
    else if (auto5DB55850_val == "Terr") {
        return lib1_ge_race_terran;
    }
    else if (auto5DB55850_val == "Zerg") {
        return lib1_ge_race_zerg;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_063C9B82", "p", IntToText(lp_p));
        lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_063C9B82"));
        return -1;
    }
}

int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(lp_t, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return TechTreeUnitCount(lp_p, lp_t, c_techCountCompleteOnly);
}

int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p) {
    // Variable Declarations
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (lib1_gf_numberofunitsoftypeforplayer(lp_t1, lp_p) + lib1_gf_numberofunitsoftypeforplayer(lp_t2, lp_p));
}

point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_PointWithZOffset(PointWithOffset(lp_p, lp_x, lp_y), lp_z);
}

unit lib1_gf_previousselectedunit (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_selectedunits[lp_p][1];
}

unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(lp_ut, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

void lib1_gf_alertplayernotenoughminerals (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("Alert_TerranNeedMoreMinerals", -1), lp_p);
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, StringExternal("Param/Value/lib_1_6546880C"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, StringExternal("Param/Value/lib_1_4F06080C"));
    }
}

void lib1_gf_alertplayererror (int lp_p, text lp_err) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("UI_GenericError", -1), lp_p);
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, lp_err);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, lp_err);
    }
}

void lib1_gf_cleartextmessageareaforallusers (int lp_messagearea) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6CEBE01C_ae = 20;
    const int auto6CEBE01C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto6CEBE01C_ai >= 0 && lv_i <= auto6CEBE01C_ae) || (auto6CEBE01C_ai < 0 && lv_i >= auto6CEBE01C_ae) ) ; lv_i += auto6CEBE01C_ai ) {
        UIDisplayMessage(PlayerGroupAll(), lp_messagearea, StringExternal("Param/Value/lib_1_A4D10BC7"));
    }
}

void lib1_gf_cleartextmessageareaforuser (int lp_p, int lp_messagearea) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1CD5B932_ae = 20;
    const int auto1CD5B932_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto1CD5B932_ai >= 0 && lv_i <= auto1CD5B932_ae) || (auto1CD5B932_ai < 0 && lv_i >= auto1CD5B932_ae) ) ; lv_i += auto1CD5B932_ai ) {
        UIDisplayMessage(PlayerGroupSingle(lp_p), lp_messagearea, StringExternal("Param/Value/lib_1_86E4D322"));
    }
}

void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_ut, lp_opts, lp_player, lp_point, 270.0);
}

void lib1_gf_createunitatrandompointinregion (string lp_ut, region lp_r, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_ut, lp_opts, lp_player, RegionRandomPoint(lp_r), 270.0);
}

void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(lp_n, lp_ut, lp_opts, lp_player, lp_point, 270.0);
}

void lib1_gf_createNunitsatrandompointsinregion (int lp_n, string lp_ut, region lp_r, int lp_player, int lp_opts) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    int auto96CB641C_ae;
    const int auto96CB641C_ai = 1;

    // Variable Initialization

    // Implementation
    auto96CB641C_ae = lp_n;
    lv__i = 1;
    for ( ; ( (auto96CB641C_ai >= 0 && lv__i <= auto96CB641C_ae) || (auto96CB641C_ai < 0 && lv__i >= auto96CB641C_ae) ) ; lv__i += auto96CB641C_ai ) {
        lib1_gf_createunitatrandompointinregion(lp_ut, lp_r, lp_player, lp_opts);
    }
}

void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage) {
    // Variable Declarations
    int lv__i;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoE0F930F6_ae = 99;
    const int autoE0F930F6_ai = 1;
    string auto9E432B67_val;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoE0F930F6_ai >= 0 && lv__i <= autoE0F930F6_ae) || (autoE0F930F6_ai < 0 && lv__i >= autoE0F930F6_ae) ) ; lv__i += autoE0F930F6_ai ) {
        auto9E432B67_val = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (auto9E432B67_val == lp_debouncedmessage.lv_id) {
            lv__found = true;
            break;
        }
        else if (auto9E432B67_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    lib1_gf_debouncedmessageset(lp_debouncedmessage, lv__i);
}

void lib1_gf_debouncedmessageremove (string lp_id) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoDB5A6855_ae = 99;
    const int autoDB5A6855_ai = 1;
    string auto5D39A06D_val;
    const int auto519E93D7_ae = 99;
    const int auto519E93D7_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoDB5A6855_ai >= 0 && lv__i <= autoDB5A6855_ae) || (autoDB5A6855_ai < 0 && lv__i >= autoDB5A6855_ae) ) ; lv__i += autoDB5A6855_ai ) {
        auto5D39A06D_val = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (auto5D39A06D_val == lp_id) {
            lv__found = true;
            break;
        }
        else if (auto5D39A06D_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    if (lib1_gf_istrue(lv__found)) {
        lv__j = lv__i;
        for ( ; ( (auto519E93D7_ai >= 0 && lv__j <= auto519E93D7_ae) || (auto519E93D7_ai < 0 && lv__j >= auto519E93D7_ae) ) ; lv__j += auto519E93D7_ai ) {
            lib1_gf_debouncedmessageset(lib1_gv_debouncedmessages[(lv__j + 1)], lv__j);
            if (lib1_gf_isemptystring(lib1_gv_debouncedmessages[lv__j].lv_id)) {
                break;
            }

        }
    }

}

void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i) {
    // Variable Declarations
    int lv__i;
    bool lv__found;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lib1_gv_debouncedmessages[lv__i].lv_id = lp_debouncedmessage.lv_id;
    lib1_gv_debouncedmessages[lv__i].lv_insertedattimeint = lp_debouncedmessage.lv_insertedattimeint;
    lib1_gv_debouncedmessages[lv__i].lv_message = lp_debouncedmessage.lv_message;
    lib1_gv_debouncedmessages[lv__i].lv_secondstodebounce = lp_debouncedmessage.lv_secondstodebounce;
}

void lib1_gf_displaydebugmessage (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        TriggerDebugOutput(1, lp_msg, true);
    }

}

void lib1_gf_endgameforplayergroup (playergroup lp_pg, int lp_gameovertype) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto0AC03774_g;

    // Variable Initialization

    // Implementation
    auto0AC03774_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0AC03774_g, lv__p);
        if (lv__p < 0) { break; }
        GameOver(lv__p, lp_gameovertype, true, true);
    }
}

void lib1_gf_initdirection4 () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_direction4[0] = "top";
    lib1_gv_direction4[1] = "right";
    lib1_gv_direction4[2] = "bot";
    lib1_gv_direction4[3] = "left";
}

void lib1_gf_initeverysecondtimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(lib1_gv_everysecond, 1.0, true, c_timeReal);
}

void lib1_gf_initlocaldebuggingstate () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        GameSetSpeedValue(c_gameSpeedFaster);
        TriggerDebugSetTypeFile(1, "trigger-debug.txt");
    }

}

void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_messageuser (text lp_msg, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaChat, lp_msg);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaChat, lp_msg);
    }
}

void lib1_gf_messageallusers (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lp_msg);
}

void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce) {
    // Variable Declarations
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__debouncedmessage.lv_id = "";

    // Implementation
    lv__debouncedmessage.lv_id = lp_debounceid;
    lv__debouncedmessage.lv_insertedattimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_message = lp_msg;
    lv__debouncedmessage.lv_secondstodebounce = lp_secondstodebounce;
    lib1_gf_debouncedmessageaddorset(lv__debouncedmessage);
}

void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto7F55797E_g;

    // Variable Initialization

    // Implementation
    auto7F55797E_g = lp_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto7F55797E_g, lv_p);
        if (lv_p < 0) { break; }
        PlayerModifyPropertyInt(lv_p, lp_prop, lp_modify, lp_int);
    }
}

void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 1.0, -1, 10.0, false);
}

trigger auto_lib1_gf_pancameratopointforplayerasync_Trigger = null;
int auto_lib1_gf_pancameratopointforplayerasync_lp_player;
point auto_lib1_gf_pancameratopointforplayerasync_lp_point;

void lib1_gf_pancameratopointforplayerasync (int lp_player, point lp_point) {
    auto_lib1_gf_pancameratopointforplayerasync_lp_player = lp_player;
    auto_lib1_gf_pancameratopointforplayerasync_lp_point = lp_point;

    if (auto_lib1_gf_pancameratopointforplayerasync_Trigger == null) {
        auto_lib1_gf_pancameratopointforplayerasync_Trigger = TriggerCreate("auto_lib1_gf_pancameratopointforplayerasync_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_pancameratopointforplayerasync_Trigger, false, false);
}

bool auto_lib1_gf_pancameratopointforplayerasync_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_pancameratopointforplayerasync_lp_player;
    point lp_point = auto_lib1_gf_pancameratopointforplayerasync_lp_point;

    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 1.0, -1, 10.0, false);
    return true;
}

void lib1_gf_pancameratopointforplayergroup (playergroup lp_pg, point lp_point) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoE7EECA02_g;

    // Variable Initialization

    // Implementation
    autoE7EECA02_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoE7EECA02_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_pancameratopointforplayerasync(lv__p, lp_point);
    }
    Wait(1.0, c_timeReal);
}

void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPointForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), lp_p, 0.0, 100.0, 0.0);
}

void lib1_gf_playsoundforallplayers (soundlink lp_s) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_isdebugginglocally()) {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(1), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(lp_p), 100.0, 0.0);
    }
}

void lib1_gf_printtriggeringabilitystage () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_307E16AC", "ability_stage", lib1_gf_getabililtystageastext(EventUnitAbilityStage()));
    lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_307E16AC"));
}

void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto0788FCB0_g;
    int auto0788FCB0_u;

    // Variable Initialization

    // Implementation
    auto0788FCB0_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0788FCB0_u = UnitGroupCount(auto0788FCB0_g, c_unitCountAll);
    for (;; auto0788FCB0_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto0788FCB0_g, auto0788FCB0_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
}

void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoF0454A8A_g;
    int autoF0454A8A_u;
    int auto279D445D_val;

    // Variable Initialization

    // Implementation
    autoF0454A8A_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n);
    autoF0454A8A_u = UnitGroupCount(autoF0454A8A_g, c_unitCountAll);
    for (;; autoF0454A8A_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoF0454A8A_g, autoF0454A8A_u);
        if (lv_u == null) { break; }
        auto279D445D_val = lp_removetype;
        if (auto279D445D_val == lib1_ge_removeunittype_remove) {
            UnitRemove(lv_u);
        }
        else if (auto279D445D_val == lib1_ge_removeunittype_kill) {
            UnitKill(lv_u);
        }
        else {
        }
    }
}

void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    int auto1334996E_val;

    // Variable Initialization
    lv_u = lib1_gf_unitatpoint(lp_point, lp_p, lp_ut);

    // Implementation
    auto1334996E_val = lp_removetype;
    if (auto1334996E_val == lib1_ge_removeunittype_remove) {
        UnitRemove(lv_u);
    }
    else if (auto1334996E_val == lib1_ge_removeunittype_kill) {
        UnitKill(lv_u);
    }
    else {
    }
}

void lib1_gf_resetunitsingroupsofNforplayer (int lp_p) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    const int auto5D73D905_ae = 15;
    const int auto5D73D905_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (auto5D73D905_ai >= 0 && lv__i <= auto5D73D905_ae) || (auto5D73D905_ai < 0 && lv__i >= auto5D73D905_ae) ) ; lv__i += auto5D73D905_ai ) {
        lib1_gv_unitsingroupsofNperplayer[lp_p][lv__i] = UnitGroupEmpty();
    }
}

void lib1_gf_selectanyunitatpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitatpointforplayer(lp_point, lp_player), lp_player, true);
}

void lib1_gf_selectanyunitnearpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitnearpointforplayer(lp_point, lp_player), lp_player, true);
}

void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 0.0, -1, 10.0, false);
}

void lib1_gf_setrandomindices (int lp_size) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    int[17] lv__indicestochoosefrom;
    int lv__randomindex;
    int lv__lastindex;
    int lv__lastindextochoosefrom;

    // Automatic Variable Declarations
    const int auto077BBA79_ae = 16;
    const int auto077BBA79_ai = 1;
    int auto5333E637_ae;
    const int auto5333E637_ai = 1;
    int auto6EABDCC4_ae;
    const int auto6EABDCC4_ai = 1;
    int autoA445F2A2_ae;
    const int autoA445F2A2_ai = 1;

    // Variable Initialization
    lv__lastindex = (lp_size - 1);
    lv__lastindextochoosefrom = (lp_size - 1);

    // Implementation
    lv__i = 0;
    for ( ; ( (auto077BBA79_ai >= 0 && lv__i <= auto077BBA79_ae) || (auto077BBA79_ai < 0 && lv__i >= auto077BBA79_ae) ) ; lv__i += auto077BBA79_ai ) {
        lib1_gv_randomindices[lv__i] = -1;
    }
    auto5333E637_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto5333E637_ai >= 0 && lv__i <= auto5333E637_ae) || (auto5333E637_ai < 0 && lv__i >= auto5333E637_ae) ) ; lv__i += auto5333E637_ai ) {
        lv__indicestochoosefrom[lv__i] = lv__i;
    }
    auto6EABDCC4_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto6EABDCC4_ai >= 0 && lv__i <= auto6EABDCC4_ae) || (auto6EABDCC4_ai < 0 && lv__i >= auto6EABDCC4_ae) ) ; lv__i += auto6EABDCC4_ai ) {
        lv__randomindex = RandomInt(0, lv__lastindextochoosefrom);
        lib1_gv_randomindices[lv__i] = lv__indicestochoosefrom[lv__randomindex];
        autoA445F2A2_ae = lv__lastindextochoosefrom;
        lv__j = lv__randomindex;
        for ( ; ( (autoA445F2A2_ai >= 0 && lv__j <= autoA445F2A2_ae) || (autoA445F2A2_ai < 0 && lv__j >= autoA445F2A2_ae) ) ; lv__j += autoA445F2A2_ai ) {
            lv__indicestochoosefrom[lv__j] = lv__indicestochoosefrom[(lv__j + 1)];
        }
        lv__lastindextochoosefrom = (lv__lastindextochoosefrom - 1);
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: continue every second timer
//--------------------------------------------------------------------------------------------------
bool lib1_gt_continueeverysecondtimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lib1_gv_everysecond, 1.0, true, c_timeReal);
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_continueeverysecondtimer_Init () {
    lib1_gt_continueeverysecondtimer = TriggerCreate("lib1_gt_continueeverysecondtimer_Func");
    TriggerAddEventTimer(lib1_gt_continueeverysecondtimer, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: display debounced message to all users
//--------------------------------------------------------------------------------------------------
bool lib1_gt_displaydebouncedmessagetoallusers_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    string lv__id;
    int lv__currenttimeint;
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    const int auto7CB6079C_ae = 99;
    const int auto7CB6079C_ai = 1;

    // Variable Initialization
    lv__id = "";
    lv__currenttimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_id = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv__i = 0;
    for ( ; ( (auto7CB6079C_ai >= 0 && lv__i <= auto7CB6079C_ae) || (auto7CB6079C_ai < 0 && lv__i >= auto7CB6079C_ae) ) ; lv__i += auto7CB6079C_ai ) {
        lv__debouncedmessage.lv_id = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (lib1_gf_isemptystring(lv__debouncedmessage.lv_id)) {
            break;
        }

        lv__debouncedmessage.lv_insertedattimeint = lib1_gv_debouncedmessages[lv__i].lv_insertedattimeint;
        lv__debouncedmessage.lv_secondstodebounce = lib1_gv_debouncedmessages[lv__i].lv_secondstodebounce;
        if (((lv__currenttimeint - lv__debouncedmessage.lv_secondstodebounce) >= lv__debouncedmessage.lv_insertedattimeint)) {
            lv__debouncedmessage.lv_message = lib1_gv_debouncedmessages[lv__i].lv_message;
            lib1_gf_messageallusers(lv__debouncedmessage.lv_message);
            lib1_gf_debouncedmessageremove(lv__debouncedmessage.lv_id);
            lv__i = lv__i - 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_displaydebouncedmessagetoallusers_Init () {
    lib1_gt_displaydebouncedmessagetoallusers = TriggerCreate("lib1_gt_displaydebouncedmessagetoallusers_Func");
    TriggerAddEventTimer(lib1_gt_displaydebouncedmessagetoallusers, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: *track previous selected unit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_trackpreviousselectedunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_selectedunits[EventPlayer()][1] = lib1_gv_selectedunits[EventPlayer()][0];
    lib1_gv_selectedunits[EventPlayer()][0] = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_trackpreviousselectedunit_Init () {
    lib1_gt_trackpreviousselectedunit = TriggerCreate("lib1_gt_trackpreviousselectedunit_Func");
    TriggerAddEventUnitSelected(lib1_gt_trackpreviousselectedunit, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: utils - init map
//--------------------------------------------------------------------------------------------------
bool lib1_gt_utilsinitmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_initeverysecondtimer();
    lib1_gf_initlocaldebuggingstate();
    lib1_gf_initdirection4();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_utilsinitmap_Init () {
    lib1_gt_utilsinitmap = TriggerCreate("lib1_gt_utilsinitmap_Func");
    TriggerAddEventMapInit(lib1_gt_utilsinitmap);
}

void lib1_InitTriggers () {
    lib1_gt_continueeverysecondtimer_Init();
    lib1_gt_displaydebouncedmessagetoallusers_Init();
    lib1_gt_trackpreviousselectedunit_Init();
    lib1_gt_utilsinitmap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library: utils - round
//--------------------------------------------------------------------------------------------------
// Constants
const string lib2_gv_ur_startround = "uw_start round";

// Variable Declarations
playergroup lib2_gv_ur_activeplayers;
soundlink lib2_gv_ur_announceroundsound;
int lib2_gv_ur_currentround;
int lib2_gv_ur_dilabel;
int lib2_gv_ur_ditimer;
int lib2_gv_ur_diskip;
int lib2_gv_ur_dialog;
bool[17] lib2_gv_ur_playertoskipclicked;
timer lib2_gv_ur_roundtimer;
int lib2_gv_ur_timebetweenrounds;
bool lib2_gv_ur_timerexists;

// Function Declarations
void lib2_gf_ur_init (bool lp_timerexists, playergroup lp_activeplayers, soundlink lp_announceroundsound, int lp_timebetweenrounds);
void lib2_gf_ur_announceround ();
void lib2_gf_ur_resetskipclicked ();
void lib2_gf_ur_completecurrentroundandbeginnext ();
void lib2_gf_ur_showdialog (int lp_timerstart);
void lib2_gf_ur_skipifallclicked ();
void lib2_gf_ur_startfirstround (int lp_time);
void lib2_gf_ur_startround ();
void lib2_gf_ur_updatedialogtimervalue ();

// Trigger Declarations
trigger lib2_gt_ur_everysecond;
trigger lib2_gt_ur_skiproundtimer;
trigger lib2_gt_ur_roundtimerexpires;

// Library Initialization
void lib2_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: utils - round
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib2_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib2_InitVariables_completed = false;

void lib2_InitVariables () {
    if (lib2_InitVariables_completed) {
        return;
    }

    lib2_InitVariables_completed = true;

    lib2_gv_ur_activeplayers = PlayerGroupEmpty();
    lib2_gv_ur_announceroundsound = SoundLink("EditorDefaultSound", -1);
    lib2_gv_ur_currentround = 1;
    lib2_gv_ur_dilabel = c_invalidDialogControlId;
    lib2_gv_ur_ditimer = c_invalidDialogControlId;
    lib2_gv_ur_diskip = c_invalidDialogControlId;
    lib2_gv_ur_dialog = c_invalidDialogId;
    lib2_gv_ur_roundtimer = TimerCreate();
    lib2_gv_ur_timebetweenrounds = 40;
}

// Functions
void lib2_gf_ur_init (bool lp_timerexists, playergroup lp_activeplayers, soundlink lp_announceroundsound, int lp_timebetweenrounds) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_ur_timerexists = lp_timerexists;
    lib2_gv_ur_activeplayers = lp_activeplayers;
    lib2_gv_ur_announceroundsound = lp_announceroundsound;
    lib2_gv_ur_timebetweenrounds = lp_timebetweenrounds;
    DialogCreate(600, 117, c_anchorTop, 0, 0, true);
    lib2_gv_ur_dialog = DialogLastCreated();
    if (lib1_gf_istrue(lib2_gv_ur_timerexists)) {
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 300, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_2_03F612BE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_dilabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 50, 50, c_anchorTopRight, 200, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_ditimer = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib2_gv_ur_dialog, 100, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/lib_2_79150B65"), "");
        lib2_gv_ur_diskip = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 450, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_2_C6578E84"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_dilabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib2_gv_ur_dialog, 110, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/lib_2_0A68C9BF"), "");
        lib2_gv_ur_diskip = DialogControlLastCreated();
    }
}

trigger auto_lib2_gf_ur_announceround_Trigger = null;

void lib2_gf_ur_announceround () {
    if (auto_lib2_gf_ur_announceround_Trigger == null) {
        auto_lib2_gf_ur_announceround_Trigger = TriggerCreate("auto_lib2_gf_ur_announceround_TriggerFunc");
    }

    TriggerExecute(auto_lib2_gf_ur_announceround_Trigger, false, false);
}

bool auto_lib2_gf_ur_announceround_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforallplayers(lib2_gv_ur_announceroundsound);
    TextExpressionSetToken("Param/Expression/lib_2_F4DA299E", "r", IntToText(lib2_gv_ur_currentround));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_2_F4DA299E"));
    Wait(8.0, c_timeReal);
    lib1_gf_cleartextmessageareaforallusers(c_messageAreaDirective);
    return true;
}

void lib2_gf_ur_resetskipclicked () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoB8BC17DB_g;

    // Variable Initialization

    // Implementation
    DialogControlSetEnabled(lib2_gv_ur_diskip, PlayerGroupAll(), true);
    autoB8BC17DB_g = lib2_gv_ur_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoB8BC17DB_g, lv__p);
        if (lv__p < 0) { break; }
        lib2_gv_ur_playertoskipclicked[lv__p] = false;
    }
}

void lib2_gf_ur_completecurrentroundandbeginnext () {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_ur_currentround = lib2_gv_ur_currentround + 1;
    lib2_gf_ur_showdialog(lib2_gv_ur_timebetweenrounds);
}

void lib2_gf_ur_showdialog (int lp_timerstart) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib2_gv_ur_timerexists)) {
        TimerStart(lib2_gv_ur_roundtimer, lp_timerstart, false, c_timeReal);
    }

    DialogSetVisible(lib2_gv_ur_dialog, PlayerGroupAll(), true);
    lib2_gf_ur_updatedialogtimervalue();
}

void lib2_gf_ur_skipifallclicked () {
    // Variable Declarations
    int lv__p;
    bool lv__allclicked;

    // Automatic Variable Declarations
    playergroup auto58175071_g;

    // Variable Initialization
    lv__allclicked = true;

    // Implementation
    auto58175071_g = lib2_gv_ur_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto58175071_g, lv__p);
        if (lv__p < 0) { break; }
        if (lib1_gf_isfalse(lib2_gv_ur_playertoskipclicked[lv__p])) {
            lv__allclicked = false;
            break;
        }

    }
    if (lib1_gf_istrue(lv__allclicked)) {
        libNtve_gf_StopTimer(lib2_gv_ur_roundtimer);
        lib2_gf_ur_startround();
    }

}

void lib2_gf_ur_startfirstround (int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gf_ur_showdialog(lp_time);
}

void lib2_gf_ur_startround () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib2_gv_ur_dialog, PlayerGroupAll(), false);
    lib2_gf_ur_resetskipclicked();
    lib2_gf_ur_announceround();
    TriggerSendEvent(lib2_gv_ur_startround);
}

void lib2_gf_ur_updatedialogtimervalue () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib1_gf_timerisactive(lib2_gv_ur_roundtimer))) {
        libNtve_gf_SetDialogItemText(lib2_gv_ur_ditimer, FixedToText(TimerGetRemaining(lib2_gv_ur_roundtimer), 0), PlayerGroupAll());
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ur_every second
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_everysecond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_ur_updatedialogtimervalue();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_everysecond_Init () {
    lib2_gt_ur_everysecond = TriggerCreate("lib2_gt_ur_everysecond_Func");
    TriggerAddEventTimer(lib2_gt_ur_everysecond, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ur_skip round timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_skiproundtimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;
    int lv__tp;

    // Automatic Variable Declarations
    playergroup auto84A437C1_g;

    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == lib2_gv_ur_diskip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        auto84A437C1_g = lib2_gv_ur_activeplayers;
        lv__tp = -1;
        while (true) {
            lv__tp = PlayerGroupNextPlayer(auto84A437C1_g, lv__tp);
            if (lv__tp < 0) { break; }
            DialogControlSetEnabled(lv__di, PlayerGroupSingle(lv__tp), false);
            lib2_gv_ur_playertoskipclicked[lv__tp] = true;
        }
    }
    else {
        DialogControlSetEnabled(lv__di, PlayerGroupSingle(lv__p), false);
        lib2_gv_ur_playertoskipclicked[lv__p] = true;
    }
    lib2_gf_ur_skipifallclicked();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_skiproundtimer_Init () {
    lib2_gt_ur_skiproundtimer = TriggerCreate("lib2_gt_ur_skiproundtimer_Func");
    TriggerAddEventDialogControl(lib2_gt_ur_skiproundtimer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ur_round timer expires
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_roundtimerexpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_ur_startround();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_roundtimerexpires_Init () {
    lib2_gt_ur_roundtimerexpires = TriggerCreate("lib2_gt_ur_roundtimerexpires_Func");
    TriggerAddEventTimer(lib2_gt_ur_roundtimerexpires, lib2_gv_ur_roundtimer);
}

void lib2_InitTriggers () {
    lib2_gt_ur_everysecond_Init();
    lib2_gt_ur_skiproundtimer_Init();
    lib2_gt_ur_roundtimerexpires_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitLib_completed = true;

    lib2_InitLibraries();
    lib2_InitVariables();
    lib2_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCOMI_InitLib();
    lib1_InitLib();
    lib2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_g_ally = 9;
const int gv_g_enemy = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_g_activeplayers;
playergroup gv_g_activeplayersplusally;
unit gv_g_allyminingstation;
playergroup gv_g_enemyplayergroup;
unitgroup gv_g_playerminingstations;
int gv_g_round;

void InitGlobals () {
    gv_g_activeplayers = PlayerGroupEmpty();
    gv_g_activeplayersplusally = PlayerGroupEmpty();
    gv_g_enemyplayergroup = PlayerGroupEmpty();
    gv_g_playerminingstations = UnitGroupEmpty();
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_initmaxpopperplayer ();
void gf_initmineralsperplayer ();
void gf_initunitperplayer ();
void gf_initplayers ();
void gf_initplayergroups ();
void gf_initalliances ();
void gf_initminingstations ();
void gf_initdefensepointpings ();
void gf_initmisc ();
void gf_inittextmessage ();
void gf_initroundtimerdialog ();
void gf_initmultiplayerraces ();
void gf_inittestdata ();
void gf_inittestrace ();
void gf_round1 ();
void gf_round2 ();
void gf_round3 ();

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_init;
trigger gt_inittesting;
trigger gt_startround;
trigger gt_allyminingstationselected;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_initmaxpopperplayer () {
    // Variable Declarations
    int lv__p;
    int lv__maxpopperplayerwith8people;
    int lv__maxpoptotal;
    int lv__maxpopperplayer;

    // Automatic Variable Declarations
    playergroup auto9D1A76C3_g;

    // Variable Initialization
    lv__maxpopperplayerwith8people = 200;
    lv__maxpoptotal = (lv__maxpopperplayerwith8people * 8);
    lv__maxpopperplayer = (lv__maxpoptotal / PlayerGroupCount(gv_g_activeplayers));

    // Implementation
    auto9D1A76C3_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto9D1A76C3_g, lv__p);
        if (lv__p < 0) { break; }
        PlayerModifyPropertyInt(lv__p, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv__maxpopperplayer);
        PlayerModifyPropertyInt(lv__p, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv__maxpopperplayer);
    }
}

void gf_initmineralsperplayer () {
    // Variable Declarations
    int lv__p;
    int lv__mineralsperplayerwith8people;
    int lv__mineralstotal;
    int lv__startupcostperplayer;
    int lv__mineralsperplayer;

    // Automatic Variable Declarations
    playergroup autoEC2780F1_g;

    // Variable Initialization
    lv__mineralsperplayerwith8people = 600;
    lv__mineralstotal = (lv__mineralsperplayerwith8people * 8);
    lv__startupcostperplayer = 400;
    lv__mineralsperplayer = ((lv__mineralstotal / PlayerGroupCount(gv_g_activeplayers)) + lv__startupcostperplayer);

    // Implementation
    autoEC2780F1_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoEC2780F1_g, lv__p);
        if (lv__p < 0) { break; }
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSetTo, lv__mineralsperplayer);
    }
}

void gf_initunitperplayer () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoC76926AD_g;

    // Variable Initialization

    // Implementation
    autoC76926AD_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoC76926AD_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_createunitatpoint("StartingSCVLz", PointFromName(("init unit - p" + IntToString(lv__p))), lv__p, 0);
        UnitControlGroupAddUnit(lv__p, 1, UnitLastCreated());
    }
}

void gf_initplayers () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_initmineralsperplayer();
    gf_initmaxpopperplayer();
    gf_initunitperplayer();
}

void gf_initplayergroups () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    const int autoA8169E44_ae = 8;
    const int autoA8169E44_ai = 1;
    int auto89935255_ae;
    const int auto89935255_ai = 1;

    // Variable Initialization

    // Implementation
    lv__p = 1;
    for ( ; ( (autoA8169E44_ai >= 0 && lv__p <= autoA8169E44_ae) || (autoA8169E44_ai < 0 && lv__p >= autoA8169E44_ae) ) ; lv__p += autoA8169E44_ai ) {
        if (lib1_gf_istrue(PlayerGroupHasPlayer(PlayerGroupActive(), lv__p))) {
            PlayerGroupAdd(gv_g_activeplayers, lv__p);
        }

    }
    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        auto89935255_ae = lib1_gv_testmultiplayerlocallynumplayers;
        lv__p = 2;
        for ( ; ( (auto89935255_ai >= 0 && lv__p <= auto89935255_ae) || (auto89935255_ai < 0 && lv__p >= auto89935255_ae) ) ; lv__p += auto89935255_ai ) {
            PlayerGroupAdd(gv_g_activeplayers, lv__p);
            PlayerSetRace(lv__p, "Terr");
        }
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_g_activeplayers, gv_g_activeplayersplusally);
    PlayerGroupAdd(gv_g_activeplayersplusally, gv_g_ally);
    PlayerGroupAdd(gv_g_enemyplayergroup, gv_g_enemy);
}

void gf_initalliances () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_SetPlayerGroupAlliance(gv_g_activeplayersplusally, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_g_activeplayers, c_allianceIdPushable, true);
    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        libNtve_gf_SetPlayerGroupAlliance(gv_g_activeplayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }

}

void gf_initminingstations () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto4B3A0AA0_g;

    // Variable Initialization

    // Implementation
    auto4B3A0AA0_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto4B3A0AA0_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_createunitatpoint("MiningStationPlayerLz", PointFromId(393756790), lv__p, c_unitCreateIgnorePlacement);
        UnitGroupAdd(gv_g_playerminingstations, UnitLastCreated());
    }
    lib1_gf_createunitatpoint("MiningStationAllyLz", PointFromId(393756790), gv_g_ally, c_unitCreateIgnorePlacement);
    gv_g_allyminingstation = UnitLastCreated();
    TriggerEnable(gt_allyminingstationselected, true);
}

void gf_initdefensepointpings () {
    // Variable Declarations
    int lv__pingdurationseconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__pingdurationseconds = 30;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1134796180), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 90.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(788266754), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(445186026), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 180.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(734070339), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, -90.0);
}

void gf_initmisc () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
}

trigger auto_gf_inittextmessage_Trigger = null;

void gf_inittextmessage () {
    if (auto_gf_inittextmessage_Trigger == null) {
        auto_gf_inittextmessage_Trigger = TriggerCreate("auto_gf_inittextmessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_inittextmessage_Trigger, false, false);
}

bool auto_gf_inittextmessage_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforallplayers(SoundLink("AnnounceWaveLz", -1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/17E7CD71"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/4DB04D59"));
    Wait(30.0, c_timeReal);
    lib1_gf_cleartextmessageareaforallusers(c_messageAreaDirective);
    return true;
}

void gf_initroundtimerdialog () {
    // Automatic Variable Declarations
    // Implementation
    lib2_gf_ur_init(true, gv_g_activeplayers, SoundLink("AnnounceWaveLz", -1), 40);
    lib2_gf_ur_startfirstround(120);
}

void gf_initmultiplayerraces () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_testmultiplayerlocallyraces[2] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[3] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[4] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[5] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[6] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[7] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[8] = "Terr";
}

void gf_inittestdata () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib1_gv_test)) {
        gf_initmultiplayerraces();
    }

}

void gf_inittestrace () {
    // Automatic Variable Declarations
}

void gf_round1 () {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    int auto7692722A_i;

    // Variable Initialization
    lv__d = "";

    // Implementation
    for (auto7692722A_i = 0; auto7692722A_i < 4; auto7692722A_i +=1 )
    {
        lv__d = lib1_gv_direction4[auto7692722A_i];
        lib1_gf_createNunitsatrandompointsinregion(20, "SwarmZerglingLz", RegionFromName(("enemy spawn - core - " + lv__d)), gv_g_enemy, c_unitCreateIgnoreBirth);
        ;
    }
}

void gf_round2 () {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    int auto1658EEAA_i;

    // Variable Initialization
    lv__d = "";

    // Implementation
    if ((lib2_gv_ur_currentround >= 2)) {
        for (auto1658EEAA_i = 0; auto1658EEAA_i < 4; auto1658EEAA_i +=1 )
        {
            lv__d = lib1_gv_direction4[auto1658EEAA_i];
            lib1_gf_createNunitsatrandompointsinregion(10, "SwarmRoachLz", RegionFromName(("enemy spawn - core - " + lv__d)), gv_g_enemy, c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round3 () {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    int autoA5455EC4_i;

    // Variable Initialization
    lv__d = "";

    // Implementation
    if ((lib2_gv_ur_currentround >= 3)) {
        for (autoA5455EC4_i = 0; autoA5455EC4_i < 4; autoA5455EC4_i +=1 )
        {
            lv__d = lib1_gv_direction4[autoA5455EC4_i];
            lib1_gf_createNunitsatrandompointsinregion(20, "SwarmZerglingLz", RegionFromName(("enemy spawn - core - " + lv__d)), gv_g_enemy, c_unitCreateIgnoreBirth);
            ;
        }
    }

}

//--------------------------------------------------------------------------------------------------
// Trigger: init
//--------------------------------------------------------------------------------------------------
bool gt_init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_inittestdata();
    gf_initplayergroups();
    gf_initalliances();
    gf_initminingstations();
    gf_initmisc();
    gf_initplayers();
    gf_initdefensepointpings();
    gf_inittextmessage();
    gf_initroundtimerdialog();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_Init () {
    gt_init = TriggerCreate("gt_init_Func");
    TriggerAddEventMapInit(gt_init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init testing
//--------------------------------------------------------------------------------------------------
bool gt_inittesting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__d = "";

    // Conditions
    if (testConds) {
        if (!(lib1_gf_istrue(lib1_gv_test))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_inittesting_Init () {
    gt_inittesting = TriggerCreate("gt_inittesting_Func");
    TriggerAddEventMapInit(gt_inittesting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: start round
//--------------------------------------------------------------------------------------------------
bool gt_startround_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_round1();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startround_Init () {
    gt_startround = TriggerCreate("gt_startround_Func");
    TriggerAddEventGeneric(gt_startround, lib2_gv_ur_startround);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ally mining station selected
//--------------------------------------------------------------------------------------------------
bool gt_allyminingstationselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv__u, lv__p, false);
    lib1_gf_selectanyunitatpointforplayer(PointFromId(393756790), lv__p);
    lib1_gf_playsoundforplayer(SoundLink("MiningStationSelectedLz", -1), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allyminingstationselected_Init () {
    gt_allyminingstationselected = TriggerCreate("gt_allyminingstationselected_Func");
    TriggerEnable(gt_allyminingstationselected, false);
    TriggerAddEventUnitSelected(gt_allyminingstationselected, UnitRefFromVariable("gv_g_allyminingstation"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_init_Init();
    gt_inittesting_Init();
    gt_startround_Init();
    gt_allyminingstationselected_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
