//==================================================================================================
// 
// Generated Map Script
// 
// Name:   LMAO The Zerg
// 
//==================================================================================================
include "TriggerLibs/NativeLib"
include "TriggerLibs/LibertyLib"
include "LibCOMI"

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// Preset Declarations
const int lib1_ge_removeunittype_kill = 0;
const int lib1_ge_removeunittype_remove = 1;
const int lib1_ge_race_protoss = 0;
const int lib1_ge_race_terran = 1;
const int lib1_ge_race_zerg = 2;

// Constants
const int lib1_gv_anyplayer = 16;
const string lib1_gv_emptystring = "";
const string lib1_gv_nogamelinkunittype = null;

// Structures
struct lib1_gs_debouncedmessage {
    text lv_message;
    int lv_insertedattimeint;
    int lv_secondstodebounce;
    string lv_id;
    int lv_player;
};

struct lib1_gs_throttledmessage {
    text lv_message;
    int lv_displayedattimeint;
    int lv_secondstothrottle;
    string lv_id;
    int lv_player;
};

// Variable Declarations
unit[17][3] lib1_gv_selectedunits;
lib1_gs_debouncedmessage[101] lib1_gv_debouncedmessages;
lib1_gs_throttledmessage[101] lib1_gv_throttledmessages;
string[5] lib1_gv_direction4;
string[5] lib1_gv_direction4diag;
string[9] lib1_gv_direction8;
text lib1_gv_colorcalamity;
text lib1_gv_colorsuccess;
text lib1_gv_colorminerals;
timer lib1_gv_everysecond;
int[17] lib1_gv_randomindices;
bool lib1_gv_test;
bool lib1_gv_testmultiplayerlocally;
int lib1_gv_testmultiplayerlocallynumplayers;
string[9] lib1_gv_testmultiplayerlocallyraces;
unitgroup[17][17] lib1_gv_unitsingroupsofNperplayer;

// Function Declarations
bool lib1_gf_and2 (bool lp_left, bool lp_right);
unit lib1_gf_anyunitatpointforplayer (point lp_p, int lp_player);
unit lib1_gf_anyunitnearpointforplayer (point lp_point, int lp_player);
bool lib1_gf_atleastNunitsinregionforplayer (int lp_n, region lp_r, int lp_p);
bool lib1_gf_atleastNunitsinregionmatchingfilterforanyplayeringroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf);
bool lib1_gf_atleastNunitsinregionmatchingfilterforplayergroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf);
bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p);
bool lib1_gf_fewerthanNunitsinregionforeachplayeringroup (int lp_n, region lp_r, playergroup lp_pg);
bool lib1_gf_fewerthanNunitsmatchingfilterinregionforeachplayeringroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf);
bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p);
bool lib1_gf_isemptystring (string lp_str);
bool lib1_gf_istrue (bool lp_b);
bool lib1_gf_isfalse (bool lp_b);
bool lib1_gf_istesting ();
bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt);
bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2);
bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3);
bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg);
bool lib1_gf_timerisactive (timer lp_t);
bool lib1_gf_timerisnotactive (timer lp_t);
bool lib1_gf_unithasbuff (unit lp_u, string lp_b);
bool lib1_gf_unitisalive (unit lp_u);
bool lib1_gf_unitistype (unit lp_u, string lp_ut);
unit lib1_gf_unitoftypeatpointforplayer (point lp_point, int lp_player, string lp_ut);
bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool);
text lib1_gf_convertbooltoonoff (bool lp_bool);
unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p);
int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype);
text lib1_gf_getabililtystageastext (int lp_stage);
text lib1_gf_getdeathtypeastext (int lp_dt);
int lib1_gf_getdeathtypefromtriggeringdeathtypecheck ();
int lib1_gf_getcurrenttimeint ();
text lib1_gf_getplayerraceastext (int lp_p);
int lib1_gf_getraceintegerfromplayer (int lp_p);
int lib1_gf_getracepresetfromplayer (int lp_p);
int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsinregion (region lp_r, int lp_p);
int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t);
int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p);
int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p);
point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z);
unit lib1_gf_previousselectedunit (int lp_p);
unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut);
void lib1_gf_alertplayernotenoughminerals (int lp_p);
void lib1_gf_alertplayererror (int lp_p, text lp_err);
void lib1_gf_cleartextmessageareaforallusers (int lp_messagearea);
void lib1_gf_cleartextmessageareaforuser (int lp_p, int lp_messagearea);
void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts);
void lib1_gf_createunitatrandompointinregion (string lp_ut, region lp_r, int lp_player, int lp_opts);
void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player, int lp_opts);
void lib1_gf_createNunitsatrandompointsinregion (int lp_n, string lp_ut, region lp_r, int lp_player, int lp_opts);
void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage);
void lib1_gf_debouncedmessageremove (string lp_id);
void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i);
void lib1_gf_displaydebugmessage (text lp_msg);
void lib1_gf_endgameforplayergroup (playergroup lp_pg, int lp_gameovertype);
void lib1_gf_initdirections ();
void lib1_gf_initeverysecondtimer ();
void lib1_gf_initlocaltestingstate ();
void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue);
void lib1_gf_messageuser (text lp_msg, int lp_p);
void lib1_gf_messageuserdebounced (text lp_msg, string lp_debounceid, int lp_player, int lp_secondstodebounce);
void lib1_gf_messageuserthrottled (text lp_msg, string lp_throttleid, int lp_player, int lp_secondstothrottle);
void lib1_gf_messageallusers (text lp_msg);
void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce);
void lib1_gf_messageallusersthrottled (text lp_msg, string lp_throttleid, int lp_secondstothrottle);
void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int);
void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_pancameratopointforplayerasync (int lp_player, point lp_point);
void lib1_gf_pancameratopointforplayergroup (playergroup lp_pg, point lp_point);
void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p);
void lib1_gf_playsoundforallplayers (soundlink lp_s);
void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p);
void lib1_gf_printtriggeringabilitystage ();
void lib1_gf_printtriggeringdeathtype ();
void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p);
void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype);
void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut);
void lib1_gf_resetunitsingroupsofNforplayer (int lp_p);
void lib1_gf_selectanyunitatpointforplayer (point lp_point, int lp_player);
void lib1_gf_selectanyunitnearpointforplayer (point lp_point, int lp_player);
void lib1_gf_selectoneunitoftypeatpointforplayer (point lp_point, int lp_player, string lp_ut);
void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point);
void lib1_gf_setrandomindices (int lp_size);
void lib1_gf_throttledmessagedisplayandsetifnotexists (structref<lib1_gs_throttledmessage> lp_throttledmessage);
void lib1_gf_throttledmessageremove (string lp_id);
void lib1_gf_throttledmessageset (structref<lib1_gs_throttledmessage> lp_throttledmessage, int lp_i);

// Trigger Declarations
trigger lib1_gt_displaydebouncedmessage;
trigger lib1_gt_updatethrottledmessages;
trigger lib1_gt_trackpreviousselectedunit;
trigger lib1_gt_utilsinitmap;

// Library Initialization
void lib1_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: utils - personal
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib1_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib1_InitVariables_completed = false;

void lib1_InitVariables () {
    int init_i;
    int init_j;

    if (lib1_InitVariables_completed) {
        return;
    }

    lib1_InitVariables_completed = true;

    for (init_i = 0; init_i <= 100; init_i += 1) {
        lib1_gv_debouncedmessages[init_i].lv_id = "";
    }
    for (init_i = 0; init_i <= 100; init_i += 1) {
        lib1_gv_throttledmessages[init_i].lv_id = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1_gv_direction4[init_i] = "";
    }
    for (init_i = 0; init_i <= 4; init_i += 1) {
        lib1_gv_direction4diag[init_i] = "";
    }
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib1_gv_direction8[init_i] = "";
    }
    lib1_gv_colorcalamity = StringExternal("Param/Value/lib_1_4A35FBAD");
    lib1_gv_colorsuccess = StringExternal("Param/Value/lib_1_1BE6C03F");
    lib1_gv_colorminerals = StringExternal("Param/Value/lib_1_4A78F77B");
    lib1_gv_everysecond = TimerCreate();
    lib1_gv_test = true;
    lib1_gv_testmultiplayerlocallynumplayers = 8;
    for (init_i = 0; init_i <= 8; init_i += 1) {
        lib1_gv_testmultiplayerlocallyraces[init_i] = "Terr";
    }
    for (init_i = 0; init_i <= 16; init_i += 1) {
        for (init_j = 0; init_j <= 16; init_j += 1) {
            lib1_gv_unitsingroupsofNperplayer[init_i][init_j] = UnitGroupEmpty();
        }
    }
}

// Presets
// Functions
bool lib1_gf_and2 (bool lp_left, bool lp_right) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_left && lp_right);
}

unit lib1_gf_anyunitatpointforplayer (point lp_p, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(null, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

unit lib1_gf_anyunitnearpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupClosestToPoint(UnitGroupSearch(null, lp_player, lp_point, 10.0, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_point);
}

bool lib1_gf_atleastNunitsinregionforplayer (int lp_n, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n) == lp_n);
}

bool lib1_gf_atleastNunitsinregionmatchingfilterforanyplayeringroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf) {
    // Variable Declarations
    int lv__p;
    int lv__count;

    // Automatic Variable Declarations
    playergroup auto1F3FFB67_g;

    // Variable Initialization

    // Implementation
    auto1F3FFB67_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto1F3FFB67_g, lv__p);
        if (lv__p < 0) { break; }
        lv__count = lv__count + UnitCount(null, lv__p, lp_r, lp_uf, lp_n);
        if ((UnitCount(null, lv__p, lp_r, lp_uf, lp_n) >= lp_n)) {
            return true;
        }
    }
    return false;
}

bool lib1_gf_atleastNunitsinregionmatchingfilterforplayergroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf) {
    // Variable Declarations
    int lv__p;
    int lv__count;

    // Automatic Variable Declarations
    playergroup auto0C1AF242_g;

    // Variable Initialization

    // Implementation
    auto0C1AF242_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0C1AF242_g, lv__p);
        if (lv__p < 0) { break; }
        lv__count = lv__count + UnitCount(null, lv__p, lp_r, lp_uf, lp_n);
        if ((lv__count >= lp_n)) {
            break;
        }
    }
    return (lv__count >= lp_n);
}

bool lib1_gf_atleastNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n) == lp_n);
}

bool lib1_gf_fewerthanNunitsinregionforplayer (int lp_n, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n) < lp_n);
}

bool lib1_gf_fewerthanNunitsinregionforeachplayeringroup (int lp_n, region lp_r, playergroup lp_pg) {
    // Variable Declarations
    int lv__p;
    int lv__count;

    // Automatic Variable Declarations
    playergroup auto0439643F_g;

    // Variable Initialization

    // Implementation
    auto0439643F_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0439643F_g, lv__p);
        if (lv__p < 0) { break; }
        if ((UnitCount(null, lv__p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n) == lp_n)) {
            return false;
        }

    }
    return true;
}

bool lib1_gf_fewerthanNunitsmatchingfilterinregionforeachplayeringroup (int lp_n, region lp_r, playergroup lp_pg, unitfilter lp_uf) {
    // Variable Declarations
    int lv__p;
    int lv__count;

    // Automatic Variable Declarations
    playergroup auto53112AB9_g;

    // Variable Initialization

    // Implementation
    auto53112AB9_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto53112AB9_g, lv__p);
        if (lv__p < 0) { break; }
        if ((UnitCount(null, lv__p, lp_r, lp_uf, lp_n) == lp_n)) {
            return false;
        }

    }
    return true;
}

bool lib1_gf_fewerthanNunitsoftypeinregionforplayer (int lp_n, string lp_u, region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitCount(lp_u, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n) < lp_n);
}

bool lib1_gf_isemptystring (string lp_str) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_str == lib1_gv_emptystring);
}

bool lib1_gf_istrue (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return lp_b;
}

bool lib1_gf_isfalse (bool lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return !(lp_b);
}

bool lib1_gf_istesting () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_istrue(lib1_gv_test);
}

bool lib1_gf_isunitwithindistanceofpoint (unit lp_u, fixed lp_d, point lp_pt) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_UnitInRegion(lp_u, RegionCircle(lp_pt, lp_d));
}

bool lib1_gf_or2 (bool lp_bool1, bool lp_bool2) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2);
}

bool lib1_gf_or3 (bool lp_bool1, bool lp_bool2, bool lp_bool3) {
    // Automatic Variable Declarations
    // Implementation
    return (lp_bool1 || lp_bool2 || lp_bool3);
}

bool lib1_gf_playerisingroup (int lp_p, playergroup lp_pg) {
    // Automatic Variable Declarations
    // Implementation
    if ((lp_p == 16)) {
        return false;
    }

    return PlayerGroupHasPlayer(lp_pg, lp_p);
}

bool lib1_gf_timerisactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) > 0.0);
}

bool lib1_gf_timerisnotactive (timer lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return (TimerGetRemaining(lp_t) <= 0.0);
}

bool lib1_gf_unithasbuff (unit lp_u, string lp_b) {
    // Automatic Variable Declarations
    // Implementation
    return UnitHasBehavior2(lp_u, lp_b);
}

bool lib1_gf_unitisalive (unit lp_u) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitIsAlive(lp_u) == true);
}

bool lib1_gf_unitistype (unit lp_u, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return (UnitGetType(lp_u) == lp_ut);
}

unit lib1_gf_unitoftypeatpointforplayer (point lp_point, int lp_player, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(lp_ut, lp_player, lp_point, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

bool lib1_gf_convertbooltoenabledisableoption (bool lp_bool) {
    // Automatic Variable Declarations
    bool auto0E8CD9BC_val;

    // Implementation
    auto0E8CD9BC_val = lp_bool;
    if (auto0E8CD9BC_val == true) {
        return true;
    }
    else {
        return false;
    }
}

text lib1_gf_convertbooltoonoff (bool lp_bool) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lp_bool)) {
        return StringExternal("Param/Value/lib_1_EE7F86C0");
    }
    else {
        return StringExternal("Param/Value/lib_1_33A9FDCD");
    }
}

unit lib1_gf_findoneunitbytypeforplayer (string lp_unittype, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroup(lp_unittype, lp_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

int lib1_gf_foraregionsetunitsingroupsofNforplayerthenreturnthenumberofgroupsfound (region lp_r, int lp_p, int lp_n, string lp_unittype) {
    // Variable Declarations
    int lv__numunits;
    int lv__numgroups;
    int lv__group;
    int lv__i;
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup auto3C360D04_g;
    int auto3C360D04_u;

    // Variable Initialization

    // Implementation
    lv__numunits = lib1_gf_numberofunitsoftypeinregion(lp_r, lp_p, lp_unittype);
    lv__numgroups = FloorI((lv__numunits / lp_n));
    if ((lv__numgroups >= 1)) {
        lib1_gf_resetunitsingroupsofNforplayer(lp_p);
        auto3C360D04_g = UnitGroup(lp_unittype, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3C360D04_u = UnitGroupCount(auto3C360D04_g, c_unitCountAll);
        for (;; auto3C360D04_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto3C360D04_g, auto3C360D04_u);
            if (lv__u == null) { break; }
            lv__group = FloorI((lv__i / lp_n));
            UnitGroupAdd(lib1_gv_unitsingroupsofNperplayer[lp_p][lv__group], lv__u);
            lv__i = (lv__i + 1);
        }
    }

    return lv__numgroups;
}

text lib1_gf_getabililtystageastext (int lp_stage) {
    // Automatic Variable Declarations
    int auto7C5C3079_val;

    // Implementation
    auto7C5C3079_val = lp_stage;
    if (auto7C5C3079_val == c_abilRallyStagePlace) {
        return StringExternal("Param/Value/lib_1_B1A9A0BE");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverEnd) {
        return StringExternal("Param/Value/lib_1_C0E52566");
    }
    else if (auto7C5C3079_val == c_abilMorphStageMoverStart) {
        return StringExternal("Param/Value/lib_1_AE6CBCB1");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsEnd) {
        return StringExternal("Param/Value/lib_1_94141FDC");
    }
    else if (auto7C5C3079_val == c_abilMorphStageAbilsStart) {
        return StringExternal("Param/Value/lib_1_315E0491");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitEnd) {
        return StringExternal("Param/Value/lib_1_875ED7AF");
    }
    else if (auto7C5C3079_val == c_abilMorphStageUnitStart) {
        return StringExternal("Param/Value/lib_1_76371732");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingEnd) {
        return StringExternal("Param/Value/lib_1_8845F40E");
    }
    else if (auto7C5C3079_val == c_abilMorphStageFacingStart) {
        return StringExternal("Param/Value/lib_1_9BA4458C");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideEnd) {
        return StringExternal("Param/Value/lib_1_E222F185");
    }
    else if (auto7C5C3079_val == c_abilMorphStageCollideStart) {
        return StringExternal("Param/Value/lib_1_96D523DB");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsEnd) {
        return StringExternal("Param/Value/lib_1_9AF529AD");
    }
    else if (auto7C5C3079_val == c_abilMorphStageStatsStart) {
        return StringExternal("Param/Value/lib_1_693AB5CA");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorEnd) {
        return StringExternal("Param/Value/lib_1_B515E506");
    }
    else if (auto7C5C3079_val == c_abilMorphStageActorStart) {
        return StringExternal("Param/Value/lib_1_3022E928");
    }
    else if (auto7C5C3079_val == c_abilMorphStageWait) {
        return StringExternal("Param/Value/lib_1_92C481D4");
    }
    else if (auto7C5C3079_val == c_abilMorphStageApproach) {
        return StringExternal("Param/Value/lib_1_82D59DD9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageDropOff) {
        return StringExternal("Param/Value/lib_1_48441561");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachDropOff) {
        return StringExternal("Param/Value/lib_1_BF2D00E9");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitForDropOff) {
        return StringExternal("Param/Value/lib_1_411DDC33");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitToReturn) {
        return StringExternal("Param/Value/lib_1_FF091B5E");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageHarvest) {
        return StringExternal("Param/Value/lib_1_222792E0");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageWaitAtResource) {
        return StringExternal("Param/Value/lib_1_89DBB633");
    }
    else if (auto7C5C3079_val == c_abilHarvestStageApproachResource) {
        return StringExternal("Param/Value/lib_1_367C28A1");
    }
    else if (auto7C5C3079_val == c_unitAbilStageUnpause) {
        return StringExternal("Param/Value/lib_1_79353442");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePause) {
        return StringExternal("Param/Value/lib_1_8FB28264");
    }
    else if (auto7C5C3079_val == c_unitAbilStageComplete) {
        return StringExternal("Param/Value/lib_1_0D4B38C5");
    }
    else if (auto7C5C3079_val == c_unitAbilStagePreempt) {
        return StringExternal("Param/Value/lib_1_ACFCE4F5");
    }
    else if (auto7C5C3079_val == c_unitAbilStageCancel) {
        return StringExternal("Param/Value/lib_1_D41AC1FC");
    }
    else if (auto7C5C3079_val == c_unitAbilStageExecute) {
        return StringExternal("Param/Value/lib_1_E19B5790");
    }
    else if (auto7C5C3079_val == c_unitAbilStageQueue) {
        return StringExternal("Param/Value/lib_1_5C203FFD");
    }
    else if (auto7C5C3079_val == c_unitAbilStageAll) {
        return StringExternal("Param/Value/lib_1_C0FADEC6");
    }
    else if (auto7C5C3079_val == c_abilEffectStageBail) {
        return StringExternal("Param/Value/lib_1_AC409659");
    }
    else if (auto7C5C3079_val == c_abilEffectStageFinish) {
        return StringExternal("Param/Value/lib_1_F8914108");
    }
    else if (auto7C5C3079_val == c_abilEffectStageChannel) {
        return StringExternal("Param/Value/lib_1_C807DFC8");
    }
    else if (auto7C5C3079_val == c_abilEffectStageCast) {
        return StringExternal("Param/Value/lib_1_2C79D0B3");
    }
    else if (auto7C5C3079_val == c_abilEffectStagePrep) {
        return StringExternal("Param/Value/lib_1_A3DCFA2F");
    }
    else if (auto7C5C3079_val == c_abilEffectStageApproach) {
        return StringExternal("Param/Value/lib_1_36F8FDEE");
    }
    else if (auto7C5C3079_val == c_abilBuildStageCollide) {
        return StringExternal("Param/Value/lib_1_1660F597");
    }
    else if (auto7C5C3079_val == c_abilBuildStageFinish) {
        return StringExternal("Param/Value/lib_1_2E58CBA2");
    }
    else if (auto7C5C3079_val == c_abilBuildStageResume) {
        return StringExternal("Param/Value/lib_1_F40CAC62");
    }
    else if (auto7C5C3079_val == c_abilBuildStageHalt) {
        return StringExternal("Param/Value/lib_1_CEBB5E3B");
    }
    else if (auto7C5C3079_val == c_abilBuildStageConstruct) {
        return StringExternal("Param/Value/lib_1_7923C72E");
    }
    else if (auto7C5C3079_val == c_abilBuildStageWait) {
        return StringExternal("Param/Value/lib_1_CA9D1B07");
    }
    else if (auto7C5C3079_val == c_abilBuildStageApproach) {
        return StringExternal("Param/Value/lib_1_4134203F");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageToggled) {
        return StringExternal("Param/Value/lib_1_6D6E5434");
    }
    else if (auto7C5C3079_val == c_abilBehaviorStageUntoggled) {
        return StringExternal("Param/Value/lib_1_78B24B45");
    }
    else if (auto7C5C3079_val == c_abilAttackStageLoiter) {
        return StringExternal("Param/Value/lib_1_DDF50FE4");
    }
    else if (auto7C5C3079_val == c_abilAttackStageAttack) {
        return StringExternal("Param/Value/lib_1_41418C08");
    }
    else if (auto7C5C3079_val == c_abilAttackStageApproach) {
        return StringExternal("Param/Value/lib_1_7E513C70");
    }
    else {
        return StringExternal("Param/Value/lib_1_0DDB8C11");
    }
}

text lib1_gf_getdeathtypeastext (int lp_dt) {
    // Automatic Variable Declarations
    int auto4489285B_val;

    // Implementation
    auto4489285B_val = lp_dt;
    if (auto4489285B_val == c_deathTypeBlast) {
        return StringExternal("Param/Value/lib_1_AD1DB0F1");
    }
    else if (auto4489285B_val == c_deathTypeCancel) {
        return StringExternal("Param/Value/lib_1_A4A7937E");
    }
    else if (auto4489285B_val == c_deathTypeDisintegrate) {
        return StringExternal("Param/Value/lib_1_5DD016EA");
    }
    else if (auto4489285B_val == c_deathTypeEat) {
        return StringExternal("Param/Value/lib_1_90D5B1E1");
    }
    else if (auto4489285B_val == c_deathTypeElectrocute) {
        return StringExternal("Param/Value/lib_1_93D68FAF");
    }
    else if (auto4489285B_val == c_deathTypeEviscerate) {
        return StringExternal("Param/Value/lib_1_1C757CCB");
    }
    else if (auto4489285B_val == c_deathTypeFire) {
        return StringExternal("Param/Value/lib_1_D2BFF059");
    }
    else if (auto4489285B_val == c_deathTypeFreeze) {
        return StringExternal("Param/Value/lib_1_41BA4B73");
    }
    else if (auto4489285B_val == c_deathTypeImpact) {
        return StringExternal("Param/Value/lib_1_B4361625");
    }
    else if (auto4489285B_val == c_deathTypeMorph) {
        return StringExternal("Param/Value/lib_1_5AF3F07B");
    }
    else if (auto4489285B_val == c_deathTypeNormal) {
        return StringExternal("Param/Value/lib_1_F24E698A");
    }
    else if (auto4489285B_val == c_deathTypeRemove) {
        return StringExternal("Param/Value/lib_1_49B789C5");
    }
    else if (auto4489285B_val == c_deathTypeSalvage) {
        return StringExternal("Param/Value/lib_1_3B1EB457");
    }
    else if (auto4489285B_val == c_deathTypeSilentkill) {
        return StringExternal("Param/Value/lib_1_677AA4B5");
    }
    else if (auto4489285B_val == c_deathTypeSquish) {
        return StringExternal("Param/Value/lib_1_B283DD07");
    }
    else if (auto4489285B_val == c_deathTypeTimeout) {
        return StringExternal("Param/Value/lib_1_ECC9DA31");
    }
    else if (auto4489285B_val == c_deathTypeUnderConstruction) {
        return StringExternal("Param/Value/lib_1_64B383E7");
    }
    else if (auto4489285B_val == c_deathTypeUnlink) {
        return StringExternal("Param/Value/lib_1_A6829EAA");
    }
    else {
        return StringExternal("Param/Value/lib_1_FA71964E");
    }
}

int lib1_gf_getdeathtypefromtriggeringdeathtypecheck () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeBlast))) {
        return c_deathTypeBlast;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeCancel))) {
        return c_deathTypeCancel;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeDisintegrate))) {
        return c_deathTypeDisintegrate;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeEat))) {
        return c_deathTypeEat;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeElectrocute))) {
        return c_deathTypeElectrocute;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeEviscerate))) {
        return c_deathTypeEviscerate;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeFire))) {
        return c_deathTypeFire;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeFreeze))) {
        return c_deathTypeFreeze;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeImpact))) {
        return c_deathTypeImpact;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeMorph))) {
        return c_deathTypeMorph;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeNormal))) {
        return c_deathTypeNormal;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeRemove))) {
        return c_deathTypeRemove;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeSalvage))) {
        return c_deathTypeSalvage;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeSilentkill))) {
        return c_deathTypeSilentkill;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeSquish))) {
        return c_deathTypeSquish;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeTimeout))) {
        return c_deathTypeTimeout;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeUnderConstruction))) {
        return c_deathTypeUnderConstruction;
    }
    else if (lib1_gf_istrue(EventUnitDamageDeathCheck(c_deathTypeUnlink))) {
        return c_deathTypeUnlink;
    }
    lib1_gf_displaydebugmessage(StringExternal("Param/Value/lib_1_EF8FA4EB"));
    return c_deathTypeUnlink;
}

int lib1_gf_getcurrenttimeint () {
    // Automatic Variable Declarations
    // Implementation
    return DateTimeToInt(CurrentDateTimeGet());
}

text lib1_gf_getplayerraceastext (int lp_p) {
    // Automatic Variable Declarations
    string autoDDE34797_val;

    // Implementation
    autoDDE34797_val = PlayerRace(lp_p);
    if (autoDDE34797_val == "Prot") {
        return StringExternal("Param/Value/lib_1_4B0781BB");
    }
    else if (autoDDE34797_val == "Terr") {
        return StringExternal("Param/Value/lib_1_96CA8A61");
    }
    else if (autoDDE34797_val == "Zerg") {
        return StringExternal("Param/Value/lib_1_45CC7D05");
    }
    else {
        return StringExternal("Param/Value/lib_1_28EC086C");
    }
}

int lib1_gf_getraceintegerfromplayer (int lp_p) {
    // Variable Declarations
    int lv__race;

    // Automatic Variable Declarations
    string autoC73756C2_val;

    // Variable Initialization

    // Implementation
    autoC73756C2_val = PlayerRace(lp_p);
    if (autoC73756C2_val == "Prot") {
        return lib1_ge_race_protoss;
    }
    else if (autoC73756C2_val == "Terr") {
        return lib1_ge_race_terran;
    }
    else if (autoC73756C2_val == "Zerg") {
        return lib1_ge_race_zerg;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_0137C127", "p", IntToText(lp_p));
        lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_0137C127"));
        return -1;
    }
}

int lib1_gf_getracepresetfromplayer (int lp_p) {
    // Variable Declarations
    int lv__race;

    // Automatic Variable Declarations
    string auto5DB55850_val;

    // Variable Initialization

    // Implementation
    auto5DB55850_val = PlayerRace(lp_p);
    if (auto5DB55850_val == "Prot") {
        return lib1_ge_race_protoss;
    }
    else if (auto5DB55850_val == "Terr") {
        return lib1_ge_race_terran;
    }
    else if (auto5DB55850_val == "Zerg") {
        return lib1_ge_race_zerg;
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_1_063C9B82", "p", IntToText(lp_p));
        lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_063C9B82"));
        return -1;
    }
}

int lib1_gf_numberofstructuresinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsinregion (region lp_r, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeinregion (region lp_r, int lp_p, string lp_t) {
    // Automatic Variable Declarations
    // Implementation
    return UnitCount(lp_t, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
}

int lib1_gf_numberofunitsoftypeforplayer (string lp_t, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return TechTreeUnitCount(lp_p, lp_t, c_techCountCompleteOnly);
}

int lib1_gf_numberofunitsoftwotypesforplayer (string lp_t1, string lp_t2, int lp_p) {
    // Variable Declarations
    int lv_result;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    return (lib1_gf_numberofunitsoftypeforplayer(lp_t1, lp_p) + lib1_gf_numberofunitsoftypeforplayer(lp_t2, lp_p));
}

point lib1_gf_pointwithxyzoffset (point lp_p, fixed lp_x, fixed lp_y, fixed lp_z) {
    // Automatic Variable Declarations
    // Implementation
    return libNtve_gf_PointWithZOffset(PointWithOffset(lp_p, lp_x, lp_y), lp_z);
}

unit lib1_gf_previousselectedunit (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gv_selectedunits[lp_p][1];
}

unit lib1_gf_unitatpoint (point lp_p, int lp_player, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    return UnitGroupUnit(UnitGroupSearch(lp_ut, lp_player, lp_p, 1.0, UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
}

void lib1_gf_alertplayernotenoughminerals (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("Alert_TerranNeedMoreMinerals", -1), lp_p);
    if (lib1_gf_istesting()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, StringExternal("Param/Value/lib_1_6546880C"));
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, StringExternal("Param/Value/lib_1_4F06080C"));
    }
}

void lib1_gf_alertplayererror (int lp_p, text lp_err) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforplayer(SoundLink("UI_GenericError", -1), lp_p);
    if (lib1_gf_istesting()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaError, lp_err);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaError, lp_err);
    }
}

void lib1_gf_cleartextmessageareaforallusers (int lp_messagearea) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto6CEBE01C_ae = 20;
    const int auto6CEBE01C_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto6CEBE01C_ai >= 0 && lv_i <= auto6CEBE01C_ae) || (auto6CEBE01C_ai < 0 && lv_i >= auto6CEBE01C_ae) ) ; lv_i += auto6CEBE01C_ai ) {
        UIDisplayMessage(PlayerGroupAll(), lp_messagearea, StringExternal("Param/Value/lib_1_A4D10BC7"));
    }
}

void lib1_gf_cleartextmessageareaforuser (int lp_p, int lp_messagearea) {
    // Variable Declarations
    int lv_i;

    // Automatic Variable Declarations
    const int auto1CD5B932_ae = 20;
    const int auto1CD5B932_ai = 1;

    // Variable Initialization

    // Implementation
    lv_i = 1;
    for ( ; ( (auto1CD5B932_ai >= 0 && lv_i <= auto1CD5B932_ae) || (auto1CD5B932_ai < 0 && lv_i >= auto1CD5B932_ae) ) ; lv_i += auto1CD5B932_ai ) {
        UIDisplayMessage(PlayerGroupSingle(lp_p), lp_messagearea, StringExternal("Param/Value/lib_1_86E4D322"));
    }
}

void lib1_gf_createunitatpoint (string lp_ut, point lp_point, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_ut, lp_opts, lp_player, lp_point, 270.0);
}

void lib1_gf_createunitatrandompointinregion (string lp_ut, region lp_r, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(1, lp_ut, lp_opts, lp_player, RegionRandomPoint(lp_r), 270.0);
}

void lib1_gf_createNunitsatpoint (int lp_n, string lp_ut, point lp_point, int lp_player, int lp_opts) {
    // Automatic Variable Declarations
    // Implementation
    UnitCreate(lp_n, lp_ut, lp_opts, lp_player, lp_point, 270.0);
}

void lib1_gf_createNunitsatrandompointsinregion (int lp_n, string lp_ut, region lp_r, int lp_player, int lp_opts) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    int auto96CB641C_ae;
    const int auto96CB641C_ai = 1;

    // Variable Initialization

    // Implementation
    auto96CB641C_ae = lp_n;
    lv__i = 1;
    for ( ; ( (auto96CB641C_ai >= 0 && lv__i <= auto96CB641C_ae) || (auto96CB641C_ai < 0 && lv__i >= auto96CB641C_ae) ) ; lv__i += auto96CB641C_ai ) {
        lib1_gf_createunitatrandompointinregion(lp_ut, lp_r, lp_player, lp_opts);
    }
}

void lib1_gf_debouncedmessageaddorset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage) {
    // Variable Declarations
    int lv__i;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoE0F930F6_ae = 99;
    const int autoE0F930F6_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoE0F930F6_ai >= 0 && lv__i <= autoE0F930F6_ae) || (autoE0F930F6_ai < 0 && lv__i >= autoE0F930F6_ae) ) ; lv__i += autoE0F930F6_ai ) {
        if (lib1_gf_or2(StringEqual(lib1_gv_debouncedmessages[lv__i].lv_id, lp_debouncedmessage.lv_id, c_stringNoCase), StringEqual(lib1_gv_debouncedmessages[lv__i].lv_id, lib1_gv_emptystring, c_stringNoCase))) {
            break;
        }

    }
    lib1_gf_debouncedmessageset(lp_debouncedmessage, lv__i);
}

void lib1_gf_debouncedmessageremove (string lp_id) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    bool lv__found;

    // Automatic Variable Declarations
    const int autoDB5A6855_ae = 99;
    const int autoDB5A6855_ai = 1;
    string auto5D39A06D_val;
    const int auto519E93D7_ae = 99;
    const int auto519E93D7_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoDB5A6855_ai >= 0 && lv__i <= autoDB5A6855_ae) || (autoDB5A6855_ai < 0 && lv__i >= autoDB5A6855_ae) ) ; lv__i += autoDB5A6855_ai ) {
        auto5D39A06D_val = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (auto5D39A06D_val == lp_id) {
            lv__found = true;
            break;
        }
        else if (auto5D39A06D_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    if (lib1_gf_istrue(lv__found)) {
        lv__j = lv__i;
        for ( ; ( (auto519E93D7_ai >= 0 && lv__j <= auto519E93D7_ae) || (auto519E93D7_ai < 0 && lv__j >= auto519E93D7_ae) ) ; lv__j += auto519E93D7_ai ) {
            lib1_gf_debouncedmessageset(lib1_gv_debouncedmessages[(lv__j + 1)], lv__j);
            if (lib1_gf_isemptystring(lib1_gv_debouncedmessages[lv__j].lv_id)) {
                break;
            }

        }
    }

}

void lib1_gf_debouncedmessageset (structref<lib1_gs_debouncedmessage> lp_debouncedmessage, int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_debouncedmessages[lp_i].lv_id = lp_debouncedmessage.lv_id;
    lib1_gv_debouncedmessages[lp_i].lv_insertedattimeint = lp_debouncedmessage.lv_insertedattimeint;
    lib1_gv_debouncedmessages[lp_i].lv_message = lp_debouncedmessage.lv_message;
    lib1_gv_debouncedmessages[lp_i].lv_secondstodebounce = lp_debouncedmessage.lv_secondstodebounce;
}

void lib1_gf_displaydebugmessage (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istesting()) {
        TriggerDebugOutput(1, lp_msg, true);
    }

}

void lib1_gf_endgameforplayergroup (playergroup lp_pg, int lp_gameovertype) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto0AC03774_g;

    // Variable Initialization

    // Implementation
    auto0AC03774_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto0AC03774_g, lv__p);
        if (lv__p < 0) { break; }
        GameOver(lv__p, lp_gameovertype, true, true);
    }
}

void lib1_gf_initdirections () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_direction4[0] = "top";
    lib1_gv_direction4[1] = "right";
    lib1_gv_direction4[2] = "bot";
    lib1_gv_direction4[3] = "left";
    lib1_gv_direction4diag[0] = "tr";
    lib1_gv_direction4diag[1] = "br";
    lib1_gv_direction4diag[2] = "bl";
    lib1_gv_direction4diag[3] = "tl";
    lib1_gv_direction8[0] = "top";
    lib1_gv_direction8[1] = "tr";
    lib1_gv_direction8[2] = "right";
    lib1_gv_direction8[3] = "br";
    lib1_gv_direction8[4] = "bot";
    lib1_gv_direction8[5] = "bl";
    lib1_gv_direction8[6] = "left";
    lib1_gv_direction8[7] = "tl";
}

void lib1_gf_initeverysecondtimer () {
    // Automatic Variable Declarations
    // Implementation
    TimerStart(lib1_gv_everysecond, 1.0, true, c_timeReal);
}

void lib1_gf_initlocaltestingstate () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istesting()) {
        GameSetSpeedValue(c_gameSpeedFaster);
        TriggerDebugSetTypeFile(1, "trigger-debug.txt");
    }

}

void lib1_gf_issueordertoallunitsinregion (order lp_o, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_issueordertounittypeinregion (order lp_o, string lp_u, region lp_r, int lp_p, int lp_orderqueue) {
    // Automatic Variable Declarations
    // Implementation
    UnitGroupIssueOrder(UnitGroup(null, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), lp_o, lp_orderqueue);
}

void lib1_gf_messageuser (text lp_msg, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istesting()) {
        UIDisplayMessage(PlayerGroupSingle(1), c_messageAreaChat, lp_msg);
    }
    else {
        UIDisplayMessage(PlayerGroupSingle(lp_p), c_messageAreaChat, lp_msg);
    }
}

void lib1_gf_messageuserdebounced (text lp_msg, string lp_debounceid, int lp_player, int lp_secondstodebounce) {
    // Variable Declarations
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__debouncedmessage.lv_id = "";

    // Implementation
    lv__debouncedmessage.lv_id = (lp_debounceid + ("_p" + IntToString(lp_player)));
    lv__debouncedmessage.lv_insertedattimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_message = lp_msg;
    lv__debouncedmessage.lv_secondstodebounce = lp_secondstodebounce;
    lv__debouncedmessage.lv_player = lp_player;
    lib1_gf_debouncedmessageaddorset(lv__debouncedmessage);
}

void lib1_gf_messageuserthrottled (text lp_msg, string lp_throttleid, int lp_player, int lp_secondstothrottle) {
    // Variable Declarations
    lib1_gs_throttledmessage lv__throttledmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__throttledmessage.lv_id = "";

    // Implementation
    lv__throttledmessage.lv_id = (lp_throttleid + ("_p" + IntToString(lp_player)));
    lv__throttledmessage.lv_message = lp_msg;
    lv__throttledmessage.lv_displayedattimeint = lib1_gf_getcurrenttimeint();
    lv__throttledmessage.lv_secondstothrottle = lp_secondstothrottle;
    lv__throttledmessage.lv_player = lp_player;
    lib1_gf_throttledmessagedisplayandsetifnotexists(lv__throttledmessage);
}

void lib1_gf_messageallusers (text lp_msg) {
    // Automatic Variable Declarations
    // Implementation
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, lp_msg);
}

void lib1_gf_messageallusersdebounced (text lp_msg, string lp_debounceid, int lp_secondstodebounce) {
    // Variable Declarations
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__debouncedmessage.lv_id = "";

    // Implementation
    lv__debouncedmessage.lv_id = (lp_debounceid + "_p0");
    lv__debouncedmessage.lv_insertedattimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_message = lp_msg;
    lv__debouncedmessage.lv_secondstodebounce = lp_secondstodebounce;
    lib1_gf_debouncedmessageaddorset(lv__debouncedmessage);
}

void lib1_gf_messageallusersthrottled (text lp_msg, string lp_throttleid, int lp_secondstothrottle) {
    // Variable Declarations
    lib1_gs_throttledmessage lv__throttledmessage;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__throttledmessage.lv_id = "";

    // Implementation
    lv__throttledmessage.lv_id = (lp_throttleid + "_p0");
    lv__throttledmessage.lv_message = lp_msg;
    lv__throttledmessage.lv_displayedattimeint = lib1_gf_getcurrenttimeint();
    lv__throttledmessage.lv_secondstothrottle = lp_secondstothrottle;
    lib1_gf_throttledmessagedisplayandsetifnotexists(lv__throttledmessage);
}

void lib1_gf_modifyplayergroupintproperty (playergroup lp_pg, int lp_prop, int lp_modify, int lp_int) {
    // Variable Declarations
    int lv_p;

    // Automatic Variable Declarations
    playergroup auto7F55797E_g;

    // Variable Initialization

    // Implementation
    auto7F55797E_g = lp_pg;
    lv_p = -1;
    while (true) {
        lv_p = PlayerGroupNextPlayer(auto7F55797E_g, lv_p);
        if (lv_p < 0) { break; }
        PlayerModifyPropertyInt(lv_p, lp_prop, lp_modify, lp_int);
    }
}

void lib1_gf_pancameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 1.0, -1, 10.0, false);
}

trigger auto_lib1_gf_pancameratopointforplayerasync_Trigger = null;
int auto_lib1_gf_pancameratopointforplayerasync_lp_player;
point auto_lib1_gf_pancameratopointforplayerasync_lp_point;

void lib1_gf_pancameratopointforplayerasync (int lp_player, point lp_point) {
    auto_lib1_gf_pancameratopointforplayerasync_lp_player = lp_player;
    auto_lib1_gf_pancameratopointforplayerasync_lp_point = lp_point;

    if (auto_lib1_gf_pancameratopointforplayerasync_Trigger == null) {
        auto_lib1_gf_pancameratopointforplayerasync_Trigger = TriggerCreate("auto_lib1_gf_pancameratopointforplayerasync_TriggerFunc");
    }

    TriggerExecute(auto_lib1_gf_pancameratopointforplayerasync_Trigger, false, false);
}

bool auto_lib1_gf_pancameratopointforplayerasync_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_lib1_gf_pancameratopointforplayerasync_lp_player;
    point lp_point = auto_lib1_gf_pancameratopointforplayerasync_lp_point;

    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 1.0, -1, 10.0, false);
    return true;
}

void lib1_gf_pancameratopointforplayergroup (playergroup lp_pg, point lp_point) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoE7EECA02_g;

    // Variable Initialization

    // Implementation
    autoE7EECA02_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoE7EECA02_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_pancameratopointforplayerasync(lv__p, lp_point);
    }
    Wait(1.0, c_timeReal);
}

void lib1_gf_playsoundatpoint (soundlink lp_s, point lp_p) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayAtPointForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), lp_p, 0.0, 100.0, 0.0);
}

void lib1_gf_playsoundforallplayers (soundlink lp_s) {
    // Automatic Variable Declarations
    // Implementation
    SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void lib1_gf_playsoundforplayer (soundlink lp_s, int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istesting()) {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(1), 100.0, 0.0);
    }
    else {
        SoundPlayForPlayer(lp_s, c_maxPlayers, PlayerGroupSingle(lp_p), 100.0, 0.0);
    }
}

void lib1_gf_printtriggeringabilitystage () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_307E16AC", "ability_stage", lib1_gf_getabililtystageastext(EventUnitAbilityStage()));
    lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_307E16AC"));
}

void lib1_gf_printtriggeringdeathtype () {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_1_2E1480B6", "death_type", lib1_gf_getdeathtypeastext(lib1_gf_getdeathtypefromtriggeringdeathtypecheck()));
    lib1_gf_displaydebugmessage(TextExpressionAssemble("Param/Expression/lib_1_2E1480B6"));
}

void lib1_gf_removeallunitsoftypeinregion (string lp_ut, region lp_r, int lp_p) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup auto0788FCB0_g;
    int auto0788FCB0_u;

    // Variable Initialization

    // Implementation
    auto0788FCB0_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto0788FCB0_u = UnitGroupCount(auto0788FCB0_g, c_unitCountAll);
    for (;; auto0788FCB0_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(auto0788FCB0_g, auto0788FCB0_u);
        if (lv_u == null) { break; }
        UnitRemove(lv_u);
    }
}

void lib1_gf_removeNunitsoftypeinregion (int lp_n, string lp_ut, region lp_r, int lp_p, int lp_removetype) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    unitgroup autoF0454A8A_g;
    int autoF0454A8A_u;
    int auto279D445D_val;

    // Variable Initialization

    // Implementation
    autoF0454A8A_g = UnitGroup(lp_ut, lp_p, lp_r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), lp_n);
    autoF0454A8A_u = UnitGroupCount(autoF0454A8A_g, c_unitCountAll);
    for (;; autoF0454A8A_u -= 1) {
        lv_u = UnitGroupUnitFromEnd(autoF0454A8A_g, autoF0454A8A_u);
        if (lv_u == null) { break; }
        auto279D445D_val = lp_removetype;
        if (auto279D445D_val == lib1_ge_removeunittype_remove) {
            UnitRemove(lv_u);
        }
        else if (auto279D445D_val == lib1_ge_removeunittype_kill) {
            UnitKill(lv_u);
        }
        else {
        }
    }
}

void lib1_gf_removeunitoftypeatpoint (int lp_p, point lp_point, int lp_removetype, string lp_ut) {
    // Variable Declarations
    unit lv_u;

    // Automatic Variable Declarations
    int auto1334996E_val;

    // Variable Initialization
    lv_u = lib1_gf_unitatpoint(lp_point, lp_p, lp_ut);

    // Implementation
    auto1334996E_val = lp_removetype;
    if (auto1334996E_val == lib1_ge_removeunittype_remove) {
        UnitRemove(lv_u);
    }
    else if (auto1334996E_val == lib1_ge_removeunittype_kill) {
        UnitKill(lv_u);
    }
    else {
    }
}

void lib1_gf_resetunitsingroupsofNforplayer (int lp_p) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    const int auto5D73D905_ae = 15;
    const int auto5D73D905_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (auto5D73D905_ai >= 0 && lv__i <= auto5D73D905_ae) || (auto5D73D905_ai < 0 && lv__i >= auto5D73D905_ae) ) ; lv__i += auto5D73D905_ai ) {
        lib1_gv_unitsingroupsofNperplayer[lp_p][lv__i] = UnitGroupEmpty();
    }
}

void lib1_gf_selectanyunitatpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitatpointforplayer(lp_point, lp_player), lp_player, true);
}

void lib1_gf_selectanyunitnearpointforplayer (point lp_point, int lp_player) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_anyunitnearpointforplayer(lp_point, lp_player), lp_player, true);
}

void lib1_gf_selectoneunitoftypeatpointforplayer (point lp_point, int lp_player, string lp_ut) {
    // Automatic Variable Declarations
    // Implementation
    UnitSelect(lib1_gf_unitoftypeatpointforplayer(lp_point, lp_player, lp_ut), lp_player, true);
}

void lib1_gf_setcameratopointforplayer (int lp_player, point lp_point) {
    // Automatic Variable Declarations
    // Implementation
    CameraPan(lp_player, lp_point, 0.0, -1, 10.0, false);
}

void lib1_gf_setrandomindices (int lp_size) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    int[17] lv__indicestochoosefrom;
    int lv__randomindex;
    int lv__lastindex;
    int lv__lastindextochoosefrom;

    // Automatic Variable Declarations
    const int auto077BBA79_ae = 16;
    const int auto077BBA79_ai = 1;
    int auto5333E637_ae;
    const int auto5333E637_ai = 1;
    int auto6EABDCC4_ae;
    const int auto6EABDCC4_ai = 1;
    int autoA445F2A2_ae;
    const int autoA445F2A2_ai = 1;

    // Variable Initialization
    lv__lastindex = (lp_size - 1);
    lv__lastindextochoosefrom = (lp_size - 1);

    // Implementation
    lv__i = 0;
    for ( ; ( (auto077BBA79_ai >= 0 && lv__i <= auto077BBA79_ae) || (auto077BBA79_ai < 0 && lv__i >= auto077BBA79_ae) ) ; lv__i += auto077BBA79_ai ) {
        lib1_gv_randomindices[lv__i] = -1;
    }
    auto5333E637_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto5333E637_ai >= 0 && lv__i <= auto5333E637_ae) || (auto5333E637_ai < 0 && lv__i >= auto5333E637_ae) ) ; lv__i += auto5333E637_ai ) {
        lv__indicestochoosefrom[lv__i] = lv__i;
    }
    auto6EABDCC4_ae = lv__lastindex;
    lv__i = 0;
    for ( ; ( (auto6EABDCC4_ai >= 0 && lv__i <= auto6EABDCC4_ae) || (auto6EABDCC4_ai < 0 && lv__i >= auto6EABDCC4_ae) ) ; lv__i += auto6EABDCC4_ai ) {
        lv__randomindex = RandomInt(0, lv__lastindextochoosefrom);
        lib1_gv_randomindices[lv__i] = lv__indicestochoosefrom[lv__randomindex];
        autoA445F2A2_ae = lv__lastindextochoosefrom;
        lv__j = lv__randomindex;
        for ( ; ( (autoA445F2A2_ai >= 0 && lv__j <= autoA445F2A2_ae) || (autoA445F2A2_ai < 0 && lv__j >= autoA445F2A2_ae) ) ; lv__j += autoA445F2A2_ai ) {
            lv__indicestochoosefrom[lv__j] = lv__indicestochoosefrom[(lv__j + 1)];
        }
        lv__lastindextochoosefrom = (lv__lastindextochoosefrom - 1);
    }
}

void lib1_gf_throttledmessagedisplayandsetifnotexists (structref<lib1_gs_throttledmessage> lp_throttledmessage) {
    // Variable Declarations
    int lv__i;

    // Automatic Variable Declarations
    const int autoA65E3E21_ae = 99;
    const int autoA65E3E21_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (autoA65E3E21_ai >= 0 && lv__i <= autoA65E3E21_ae) || (autoA65E3E21_ai < 0 && lv__i >= autoA65E3E21_ae) ) ; lv__i += autoA65E3E21_ai ) {
        if (lib1_gf_istrue(StringEqual(lib1_gv_throttledmessages[lv__i].lv_id, lp_throttledmessage.lv_id, c_stringNoCase))) {
            break;
        }

        if (lib1_gf_isemptystring(lib1_gv_debouncedmessages[lv__i].lv_id)) {
            lib1_gf_throttledmessageset(lp_throttledmessage, lv__i);
            if ((lp_throttledmessage.lv_player == 0)) {
                lib1_gf_messageallusers(lp_throttledmessage.lv_message);
            }
            else {
                lib1_gf_messageuser(lp_throttledmessage.lv_message, lp_throttledmessage.lv_player);
            }
            break;
        }

    }
}

void lib1_gf_throttledmessageremove (string lp_id) {
    // Variable Declarations
    int lv__i;
    int lv__j;
    bool lv__found;

    // Automatic Variable Declarations
    const int auto80E84287_ae = 99;
    const int auto80E84287_ai = 1;
    string autoB41E1FBF_val;
    const int auto3D1EEBA8_ae = 99;
    const int auto3D1EEBA8_ai = 1;

    // Variable Initialization

    // Implementation
    lv__i = 0;
    for ( ; ( (auto80E84287_ai >= 0 && lv__i <= auto80E84287_ae) || (auto80E84287_ai < 0 && lv__i >= auto80E84287_ae) ) ; lv__i += auto80E84287_ai ) {
        autoB41E1FBF_val = lib1_gv_throttledmessages[lv__i].lv_id;
        if (autoB41E1FBF_val == lp_id) {
            lv__found = true;
            break;
        }
        else if (autoB41E1FBF_val == lib1_gv_emptystring) {
            break;
        }
        else {
        }
    }
    if (lib1_gf_istrue(lv__found)) {
        lv__j = lv__i;
        for ( ; ( (auto3D1EEBA8_ai >= 0 && lv__j <= auto3D1EEBA8_ae) || (auto3D1EEBA8_ai < 0 && lv__j >= auto3D1EEBA8_ae) ) ; lv__j += auto3D1EEBA8_ai ) {
            lib1_gf_throttledmessageset(lib1_gv_throttledmessages[(lv__j + 1)], lv__j);
            if (lib1_gf_isemptystring(lib1_gv_throttledmessages[lv__j].lv_id)) {
                break;
            }

        }
    }

}

void lib1_gf_throttledmessageset (structref<lib1_gs_throttledmessage> lp_throttledmessage, int lp_i) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_throttledmessages[lp_i].lv_displayedattimeint = lp_throttledmessage.lv_displayedattimeint;
    lib1_gv_throttledmessages[lp_i].lv_id = lp_throttledmessage.lv_id;
    lib1_gv_throttledmessages[lp_i].lv_message = lp_throttledmessage.lv_message;
    lib1_gv_throttledmessages[lp_i].lv_player = lp_throttledmessage.lv_player;
    lib1_gv_throttledmessages[lp_i].lv_secondstothrottle = lp_throttledmessage.lv_secondstothrottle;
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: display debounced message
//--------------------------------------------------------------------------------------------------
bool lib1_gt_displaydebouncedmessage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    string lv__id;
    int lv__currenttimeint;
    lib1_gs_debouncedmessage lv__debouncedmessage;

    // Automatic Variable Declarations
    const int auto7CB6079C_ae = 99;
    const int auto7CB6079C_ai = 1;

    // Variable Initialization
    lv__id = "";
    lv__currenttimeint = lib1_gf_getcurrenttimeint();
    lv__debouncedmessage.lv_id = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv__i = 0;
    for ( ; ( (auto7CB6079C_ai >= 0 && lv__i <= auto7CB6079C_ae) || (auto7CB6079C_ai < 0 && lv__i >= auto7CB6079C_ae) ) ; lv__i += auto7CB6079C_ai ) {
        lv__debouncedmessage.lv_id = lib1_gv_debouncedmessages[lv__i].lv_id;
        if (lib1_gf_isemptystring(lv__debouncedmessage.lv_id)) {
            break;
        }

        lv__debouncedmessage.lv_insertedattimeint = lib1_gv_debouncedmessages[lv__i].lv_insertedattimeint;
        lv__debouncedmessage.lv_secondstodebounce = lib1_gv_debouncedmessages[lv__i].lv_secondstodebounce;
        if (((lv__currenttimeint - lv__debouncedmessage.lv_secondstodebounce) >= lv__debouncedmessage.lv_insertedattimeint)) {
            lv__debouncedmessage.lv_message = lib1_gv_debouncedmessages[lv__i].lv_message;
            if ((lv__debouncedmessage.lv_player == 0)) {
                lib1_gf_messageallusers(lv__debouncedmessage.lv_message);
            }
            else {
                lib1_gf_messageuser(lv__debouncedmessage.lv_message, lv__debouncedmessage.lv_player);
            }
            lib1_gf_debouncedmessageremove(lv__debouncedmessage.lv_id);
            lv__i = lv__i - 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_displaydebouncedmessage_Init () {
    lib1_gt_displaydebouncedmessage = TriggerCreate("lib1_gt_displaydebouncedmessage_Func");
    TriggerAddEventTimer(lib1_gt_displaydebouncedmessage, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: update throttled messages
//--------------------------------------------------------------------------------------------------
bool lib1_gt_updatethrottledmessages_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__i;
    string lv__id;
    int lv__currenttimeint;
    lib1_gs_throttledmessage lv__throttledmessage;

    // Automatic Variable Declarations
    const int auto6A765691_ae = 99;
    const int auto6A765691_ai = 1;

    // Variable Initialization
    lv__id = "";
    lv__currenttimeint = lib1_gf_getcurrenttimeint();
    lv__throttledmessage.lv_id = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv__i = 0;
    for ( ; ( (auto6A765691_ai >= 0 && lv__i <= auto6A765691_ae) || (auto6A765691_ai < 0 && lv__i >= auto6A765691_ae) ) ; lv__i += auto6A765691_ai ) {
        lv__throttledmessage.lv_id = lib1_gv_throttledmessages[lv__i].lv_id;
        if (lib1_gf_isemptystring(lv__throttledmessage.lv_id)) {
            break;
        }

        lv__throttledmessage.lv_displayedattimeint = lib1_gv_throttledmessages[lv__i].lv_displayedattimeint;
        lv__throttledmessage.lv_secondstothrottle = lib1_gv_throttledmessages[lv__i].lv_secondstothrottle;
        if (((lv__currenttimeint - lv__throttledmessage.lv_displayedattimeint) >= lv__throttledmessage.lv_secondstothrottle)) {
            lib1_gf_throttledmessageremove(lv__throttledmessage.lv_id);
            lv__i = lv__i - 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_updatethrottledmessages_Init () {
    lib1_gt_updatethrottledmessages = TriggerCreate("lib1_gt_updatethrottledmessages_Func");
    TriggerAddEventTimer(lib1_gt_updatethrottledmessages, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: *track previous selected unit
//--------------------------------------------------------------------------------------------------
bool lib1_gt_trackpreviousselectedunit_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gv_selectedunits[EventPlayer()][1] = lib1_gv_selectedunits[EventPlayer()][0];
    lib1_gv_selectedunits[EventPlayer()][0] = EventUnit();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_trackpreviousselectedunit_Init () {
    lib1_gt_trackpreviousselectedunit = TriggerCreate("lib1_gt_trackpreviousselectedunit_Func");
    TriggerAddEventUnitSelected(lib1_gt_trackpreviousselectedunit, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: utils - init map
//--------------------------------------------------------------------------------------------------
bool lib1_gt_utilsinitmap_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_initeverysecondtimer();
    lib1_gf_initlocaltestingstate();
    lib1_gf_initdirections();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib1_gt_utilsinitmap_Init () {
    lib1_gt_utilsinitmap = TriggerCreate("lib1_gt_utilsinitmap_Func");
    TriggerAddEventMapInit(lib1_gt_utilsinitmap);
}

void lib1_InitTriggers () {
    lib1_gt_displaydebouncedmessage_Init();
    lib1_gt_updatethrottledmessages_Init();
    lib1_gt_trackpreviousselectedunit_Init();
    lib1_gt_utilsinitmap_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib1_InitLib_completed = false;

void lib1_InitLib () {
    if (lib1_InitLib_completed) {
        return;
    }

    lib1_InitLib_completed = true;

    lib1_InitLibraries();
    lib1_InitVariables();
    lib1_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library: utils - round
//--------------------------------------------------------------------------------------------------
// Constants
const string lib2_gv_ur_startround = "uw_start round";

// Variable Declarations
playergroup lib2_gv_ur_activeplayers;
soundlink lib2_gv_ur_announceroundsound;
int lib2_gv_ur_currentround;
int lib2_gv_ur_dilabel;
int lib2_gv_ur_ditimer;
int lib2_gv_ur_diskip;
int lib2_gv_ur_dialog;
bool[17] lib2_gv_ur_playertoskipclicked;
timer lib2_gv_ur_roundtimer;
int lib2_gv_ur_timebetweenrounds;
bool lib2_gv_ur_timerexists;

// Function Declarations
bool lib2_gf_ur_timerisactive ();
bool lib2_gf_ur_timerisnotactive ();
void lib2_gf_ur_init (bool lp_timerexists, playergroup lp_activeplayers, soundlink lp_announceroundsound, int lp_timebetweenrounds);
void lib2_gf_ur_announceround ();
void lib2_gf_ur_resetskipclicked ();
void lib2_gf_ur_completecurrentroundandbeginnext ();
void lib2_gf_ur_showdialog (int lp_timerstart);
void lib2_gf_ur_skipifallclicked ();
void lib2_gf_ur_startfirstround (int lp_time);
void lib2_gf_ur_startround ();
void lib2_gf_ur_updatedialogtimervalue ();

// Trigger Declarations
trigger lib2_gt_ur_everysecond;
trigger lib2_gt_ur_skiproundtimer;
trigger lib2_gt_ur_roundtimerexpires;

// Library Initialization
void lib2_InitVariables ();

//--------------------------------------------------------------------------------------------------
// Library: utils - round
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void lib2_InitLibraries () {
    libNtve_InitVariables();
}

// Variable Initialization
bool lib2_InitVariables_completed = false;

void lib2_InitVariables () {
    if (lib2_InitVariables_completed) {
        return;
    }

    lib2_InitVariables_completed = true;

    lib2_gv_ur_activeplayers = PlayerGroupEmpty();
    lib2_gv_ur_announceroundsound = SoundLink("EditorDefaultSound", -1);
    lib2_gv_ur_currentround = 1;
    lib2_gv_ur_dilabel = c_invalidDialogControlId;
    lib2_gv_ur_ditimer = c_invalidDialogControlId;
    lib2_gv_ur_diskip = c_invalidDialogControlId;
    lib2_gv_ur_dialog = c_invalidDialogId;
    lib2_gv_ur_roundtimer = TimerCreate();
    lib2_gv_ur_timebetweenrounds = 40;
}

// Functions
bool lib2_gf_ur_timerisactive () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_timerisactive(lib2_gv_ur_roundtimer);
}

bool lib2_gf_ur_timerisnotactive () {
    // Automatic Variable Declarations
    // Implementation
    return lib1_gf_timerisnotactive(lib2_gv_ur_roundtimer);
}

void lib2_gf_ur_init (bool lp_timerexists, playergroup lp_activeplayers, soundlink lp_announceroundsound, int lp_timebetweenrounds) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_ur_timerexists = lp_timerexists;
    lib2_gv_ur_activeplayers = lp_activeplayers;
    lib2_gv_ur_announceroundsound = lp_announceroundsound;
    lib2_gv_ur_timebetweenrounds = lp_timebetweenrounds;
    DialogCreate(600, 117, c_anchorTop, 0, 0, true);
    lib2_gv_ur_dialog = DialogLastCreated();
    if (lib1_gf_istrue(lib2_gv_ur_timerexists)) {
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 300, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_2_03F612BE"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_dilabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 50, 50, c_anchorTopRight, 200, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_ditimer = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib2_gv_ur_dialog, 100, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/lib_2_79150B65"), "");
        lib2_gv_ur_diskip = DialogControlLastCreated();
    }
    else {
        libNtve_gf_CreateDialogItemLabel(lib2_gv_ur_dialog, 450, 50, c_anchorTopLeft, 50, 50, StringExternal("Param/Value/lib_2_C6578E84"), ColorWithAlpha(0,0,0,0), false, 2.0);
        lib2_gv_ur_dilabel = DialogControlLastCreated();
        libNtve_gf_CreateDialogItemButton(lib2_gv_ur_dialog, 110, 50, c_anchorTopRight, 50, 36, StringToText(""), StringExternal("Param/Value/lib_2_0A68C9BF"), "");
        lib2_gv_ur_diskip = DialogControlLastCreated();
    }
}

trigger auto_lib2_gf_ur_announceround_Trigger = null;

void lib2_gf_ur_announceround () {
    if (auto_lib2_gf_ur_announceround_Trigger == null) {
        auto_lib2_gf_ur_announceround_Trigger = TriggerCreate("auto_lib2_gf_ur_announceround_TriggerFunc");
    }

    TriggerExecute(auto_lib2_gf_ur_announceround_Trigger, false, false);
}

bool auto_lib2_gf_ur_announceround_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforallplayers(lib2_gv_ur_announceroundsound);
    TextExpressionSetToken("Param/Expression/lib_2_F4DA299E", "r", IntToText(lib2_gv_ur_currentround));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_2_F4DA299E"));
    Wait(8.0, c_timeReal);
    lib1_gf_cleartextmessageareaforallusers(c_messageAreaDirective);
    return true;
}

void lib2_gf_ur_resetskipclicked () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup autoB8BC17DB_g;

    // Variable Initialization

    // Implementation
    DialogControlSetEnabled(lib2_gv_ur_diskip, PlayerGroupAll(), true);
    autoB8BC17DB_g = lib2_gv_ur_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoB8BC17DB_g, lv__p);
        if (lv__p < 0) { break; }
        lib2_gv_ur_playertoskipclicked[lv__p] = false;
    }
}

void lib2_gf_ur_completecurrentroundandbeginnext () {
    // Automatic Variable Declarations
    // Implementation
    lib2_gv_ur_currentround = lib2_gv_ur_currentround + 1;
    lib2_gf_ur_showdialog(lib2_gv_ur_timebetweenrounds);
}

void lib2_gf_ur_showdialog (int lp_timerstart) {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib2_gv_ur_timerexists)) {
        TimerStart(lib2_gv_ur_roundtimer, lp_timerstart, false, c_timeReal);
    }

    DialogSetVisible(lib2_gv_ur_dialog, PlayerGroupAll(), true);
    lib2_gf_ur_updatedialogtimervalue();
}

void lib2_gf_ur_skipifallclicked () {
    // Variable Declarations
    int lv__p;
    bool lv__allclicked;

    // Automatic Variable Declarations
    playergroup auto58175071_g;

    // Variable Initialization
    lv__allclicked = true;

    // Implementation
    auto58175071_g = lib2_gv_ur_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto58175071_g, lv__p);
        if (lv__p < 0) { break; }
        if (lib1_gf_isfalse(lib2_gv_ur_playertoskipclicked[lv__p])) {
            lv__allclicked = false;
            break;
        }

    }
    if (lib1_gf_istrue(lv__allclicked)) {
        libNtve_gf_StopTimer(lib2_gv_ur_roundtimer);
        lib2_gf_ur_startround();
    }

}

void lib2_gf_ur_startfirstround (int lp_time) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gf_ur_showdialog(lp_time);
}

void lib2_gf_ur_startround () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(lib2_gv_ur_dialog, PlayerGroupAll(), false);
    lib2_gf_ur_resetskipclicked();
    lib2_gf_ur_announceround();
    TriggerSendEvent(lib2_gv_ur_startround);
}

void lib2_gf_ur_updatedialogtimervalue () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib1_gf_timerisactive(lib2_gv_ur_roundtimer))) {
        libNtve_gf_SetDialogItemText(lib2_gv_ur_ditimer, FixedToText(TimerGetRemaining(lib2_gv_ur_roundtimer), 0), PlayerGroupAll());
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: ur_every second
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_everysecond_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_ur_updatedialogtimervalue();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_everysecond_Init () {
    lib2_gt_ur_everysecond = TriggerCreate("lib2_gt_ur_everysecond_Func");
    TriggerAddEventTimer(lib2_gt_ur_everysecond, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ur_skip round timer
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_skiproundtimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__di;
    int lv__tp;

    // Automatic Variable Declarations
    playergroup auto84A437C1_g;

    // Variable Initialization
    lv__p = EventPlayer();
    lv__di = EventDialogControl();

    // Conditions
    if (testConds) {
        if (!((lv__di == lib2_gv_ur_diskip))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        auto84A437C1_g = lib2_gv_ur_activeplayers;
        lv__tp = -1;
        while (true) {
            lv__tp = PlayerGroupNextPlayer(auto84A437C1_g, lv__tp);
            if (lv__tp < 0) { break; }
            DialogControlSetEnabled(lv__di, PlayerGroupSingle(lv__tp), false);
            lib2_gv_ur_playertoskipclicked[lv__tp] = true;
        }
    }
    else {
        DialogControlSetEnabled(lv__di, PlayerGroupSingle(lv__p), false);
        lib2_gv_ur_playertoskipclicked[lv__p] = true;
    }
    lib2_gf_ur_skipifallclicked();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_skiproundtimer_Init () {
    lib2_gt_ur_skiproundtimer = TriggerCreate("lib2_gt_ur_skiproundtimer_Func");
    TriggerAddEventDialogControl(lib2_gt_ur_skiproundtimer, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ur_round timer expires
//--------------------------------------------------------------------------------------------------
bool lib2_gt_ur_roundtimerexpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib2_gf_ur_startround();
    return true;
}

//--------------------------------------------------------------------------------------------------
void lib2_gt_ur_roundtimerexpires_Init () {
    lib2_gt_ur_roundtimerexpires = TriggerCreate("lib2_gt_ur_roundtimerexpires_Func");
    TriggerAddEventTimer(lib2_gt_ur_roundtimerexpires, lib2_gv_ur_roundtimer);
}

void lib2_InitTriggers () {
    lib2_gt_ur_everysecond_Init();
    lib2_gt_ur_skiproundtimer_Init();
    lib2_gt_ur_roundtimerexpires_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool lib2_InitLib_completed = false;

void lib2_InitLib () {
    if (lib2_InitLib_completed) {
        return;
    }

    lib2_InitLib_completed = true;

    lib2_InitLibraries();
    lib2_InitVariables();
    lib2_InitTriggers();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
void InitLibs () {
    libNtve_InitLib();
    libLbty_InitLib();
    libCOMI_InitLib();
    lib1_InitLib();
    lib2_InitLib();
}

//--------------------------------------------------------------------------------------------------
// Constants
//--------------------------------------------------------------------------------------------------
const int gv_g_ally = 9;
const int gv_g_enemy = 10;

//--------------------------------------------------------------------------------------------------
// Global Variables
//--------------------------------------------------------------------------------------------------
playergroup gv_g_activeplayers;
playergroup gv_g_activeplayersplusally;
timer gv_g_allbuildingsdeadtimer;
int gv_g_allbuildingsdeaddialog;
int gv_g_allbuildingsdeaddilabel;
int gv_g_allbuildingsdeadditimer;
unit gv_g_allyminingstation;
int[9] gv_g_casualtymineralsbyplayer;
playergroup gv_g_enemyplayergroup;
region[5] gv_g_enemyspawncore4;
region[5] gv_g_enemyspawnrandom4;
region[5] gv_g_enemyspawnrandom4diag;
region[9] gv_g_enemyspawnrandom8;
point[5] gv_g_enemyspawnrandom4diagpoint;
timer gv_g_idlechecktimer;
int[9] gv_g_incomeperplayer;
int gv_g_mineralsperincomeupgrade;
unitgroup gv_g_playerminingstations;
bool[9] gv_g_playersurvivedround;
unit[9] gv_g_startingbuildersperplayer;
string[101] gv_g_swarmunitsattackair;
string[101] gv_g_swarmunitsattackground;
int gv_g_secondstilroundtimershows;
bool gv_g_roundactive;
bool gv_g_roundhandled;
bool gv_g_roundlock;

void InitGlobals () {
    gv_g_activeplayers = PlayerGroupEmpty();
    gv_g_activeplayersplusally = PlayerGroupEmpty();
    gv_g_allbuildingsdeadtimer = TimerCreate();
    gv_g_allbuildingsdeaddialog = c_invalidDialogId;
    gv_g_allbuildingsdeaddilabel = c_invalidDialogControlId;
    gv_g_allbuildingsdeadditimer = c_invalidDialogControlId;
    gv_g_enemyplayergroup = PlayerGroupEmpty();
    gv_g_idlechecktimer = TimerCreate();
    gv_g_mineralsperincomeupgrade = 25;
    gv_g_playerminingstations = UnitGroupEmpty();
    gv_g_secondstilroundtimershows = 14;
}

//--------------------------------------------------------------------------------------------------
// Global Function Declarations
//--------------------------------------------------------------------------------------------------
void gf_initincomeperplayer ();
void gf_initmaxpopperplayer ();
void gf_initmineralsperplayer ();
void gf_initunitperplayer ();
void gf_initplayers ();
void gf_initenemymisc ();
void gf_initenemyupgrades ();
void gf_initenemyunitattackcapabilities ();
void gf_disableenemyburrow ();
void gf_initalliances ();
void gf_initallbuildingsdeaddialog ();
void gf_initdefensepointpings ();
void gf_initminingstations ();
void gf_initmisc ();
void gf_initplayergroups ();
void gf_initregionandpointvars ();
void gf_initroundtimerdialog ();
void gf_inittextmessage ();
void gf_initmultiplayerraces ();
void gf_inittestrace ();
void gf_preinittest ();
void gf_inittestmisc ();
void gf_inittestvision ();
void gf_inittestupgrades ();
void gf_inittestresources ();
void gf_viewcode (playergroup lp_pg, unitfilter lp_uf, string lp_ut);
bool gf_canspawnlonglastingunits (unit lp_u);
bool gf_shouldignoreunitfortrackingcasualty (unit lp_u);
void gf_endgame (int lp__got);
void gf_updateincomebutton (bool lp_showorhide);
void gf_updatesalvagebutton (bool lp_showorhide);
void gf_startallbuildingsdeadtimer ();
void gf_stopallbuildingsdeadtimer ();
void gf_healplayers ();
void gf_refillmagazines ();
void gf_refundcasualties ();
void gf_rewardincome ();
void gf_spawnstartingbuilders ();
void gf_refillenergyforunitspawningcasters ();
void gf_killstartingbuilders ();
void gf_round1 ();
void gf_round2 ();
void gf_round3 ();
void gf_round4 ();
void gf_round5 ();
void gf_round6 ();
void gf_round7 ();
void gf_round8 ();
void gf_round9 ();
void gf_round10 ();
void gf_round11 ();
void gf_round12 ();
void gf_round13 ();
void gf_round14 ();
void gf_round15 ();
void gf_round16 ();
void gf_round17 ();
void gf_round18 ();
void gf_round19 ();
void gf_round20 ();
void gf_sendattackwaves ();
bool gf_swarmunitcanattackair (unit lp_u);
bool gf_swarmunitcanattackground (unit lp_u);
bool gf_unitisstartingworker (unit lp_u);
void gf_trytechlab (int lp_p, unit lp_u, string lp_ut, abilcmd lp_abilitycommand);
void gf_updateminingbutton (int lp_p);

//--------------------------------------------------------------------------------------------------
// Trigger Variables
//--------------------------------------------------------------------------------------------------
trigger gt_init;
trigger gt_inittesting;
trigger gt_completecurrentroundandbeginnext;
trigger gt_startround;
trigger gt_allbuildingsdeadtimerexpires;
trigger gt_allallyunitsdead;
trigger gt_allybuildingiscreated;
trigger gt_allyunitiscreated;
trigger gt_certainallyunitismorphed;
trigger gt_checkallbuildingsdeadtimer;
trigger gt_trackcasualtyminerals;
trigger gt_updateallbuildingsdeadtimer;
trigger gt_orderidleunits;
trigger gt_buildbarrackstechlab;
trigger gt_buildfactorytechlab;
trigger gt_buildstarporttechlab;
trigger gt_allyminingstationselected;
trigger gt_startingworkerplacementafterbuild;
trigger gt_upgrademining;
trigger gt_salvage;
trigger gt_teleportunitsinspawnarea;

//--------------------------------------------------------------------------------------------------
// Global Functions
//--------------------------------------------------------------------------------------------------
void gf_initincomeperplayer () {
    // Variable Declarations
    int lv__p;
    int lv__incomeperplayerwith8people;
    int lv__mineralstotal;
    int lv__commoncostperplayer;
    int lv__incomeperplayer;

    // Automatic Variable Declarations
    playergroup auto76E774D1_g;

    // Variable Initialization
    lv__incomeperplayerwith8people = 300;
    lv__mineralstotal = (lv__incomeperplayerwith8people * 8);
    lv__commoncostperplayer = 200;
    lv__incomeperplayer = ((lv__mineralstotal / PlayerGroupCount(gv_g_activeplayers)) + lv__commoncostperplayer);

    // Implementation
    auto76E774D1_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto76E774D1_g, lv__p);
        if (lv__p < 0) { break; }
        gv_g_incomeperplayer[lv__p] = lv__incomeperplayer;
        gf_updateminingbutton(lv__p);
    }
}

void gf_initmaxpopperplayer () {
    // Variable Declarations
    int lv__p;
    int lv__maxpopperplayerwith8people;
    int lv__maxpoptotal;
    int lv__maxpopperplayer;

    // Automatic Variable Declarations
    playergroup auto9D1A76C3_g;

    // Variable Initialization
    lv__maxpopperplayerwith8people = 200;
    lv__maxpoptotal = (lv__maxpopperplayerwith8people * 8);
    lv__maxpopperplayer = (lv__maxpoptotal / PlayerGroupCount(gv_g_activeplayers));

    // Implementation
    auto9D1A76C3_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto9D1A76C3_g, lv__p);
        if (lv__p < 0) { break; }
        PlayerModifyPropertyInt(lv__p, c_playerPropSuppliesLimit, c_playerPropOperSetTo, lv__maxpopperplayer);
        PlayerModifyPropertyInt(lv__p, c_playerPropSuppliesMade, c_playerPropOperSetTo, lv__maxpopperplayer);
    }
}

void gf_initmineralsperplayer () {
    // Variable Declarations
    int lv__p;
    int lv__mineralsperplayerwith8people;
    int lv__mineralstotal;
    int lv__startupcostperplayer;
    int lv__mineralsperplayer;

    // Automatic Variable Declarations
    playergroup autoEC2780F1_g;

    // Variable Initialization
    lv__mineralsperplayerwith8people = 600;
    lv__mineralstotal = (lv__mineralsperplayerwith8people * 8);
    lv__startupcostperplayer = 400;
    lv__mineralsperplayer = ((lv__mineralstotal / PlayerGroupCount(gv_g_activeplayers)) + lv__startupcostperplayer);

    // Implementation
    autoEC2780F1_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoEC2780F1_g, lv__p);
        if (lv__p < 0) { break; }
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperSetTo, lv__mineralsperplayer);
    }
}

void gf_initunitperplayer () {
    // Variable Declarations
    int lv__p;
    point lv__initunitpoint;
    string lv__ut;

    // Automatic Variable Declarations
    playergroup autoC76926AD_g;
    string auto5F001571_val;

    // Variable Initialization

    // Implementation
    autoC76926AD_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoC76926AD_g, lv__p);
        if (lv__p < 0) { break; }
        lv__initunitpoint = PointFromName(("init unit - p" + IntToString(lv__p)));
        auto5F001571_val = PlayerRace(lv__p);
        if (auto5F001571_val == "Terr") {
            lv__ut = "StartingSCVLz";
        }
        else if (auto5F001571_val == "Prot") {
            lv__ut = "StartingProbeLz";
        }
        else if (auto5F001571_val == "Zerg") {
            lv__ut = "StartingDroneLz";
        }
        else {
        }
        lib1_gf_createunitatpoint(lv__ut, lv__initunitpoint, lv__p, 0);
        gv_g_startingbuildersperplayer[lv__p] = UnitLastCreated();
        UnitControlGroupAddUnit(lv__p, 1, UnitLastCreated());
    }
}

void gf_initplayers () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    gf_initmineralsperplayer();
    gf_initmaxpopperplayer();
    gf_initunitperplayer();
    gf_initincomeperplayer();
}

void gf_initenemymisc () {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetDifficulty(gv_g_enemy, 4);
    CampaignInitAI();
    AIStart(gv_g_enemy, true, 200);
    TimerStart(gv_g_idlechecktimer, 2.0, true, c_timeReal);
}

void gf_initenemyupgrades () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeUpgradeAddLevel(gv_g_enemy, "NeuralParasite", 1);
    TechTreeUpgradeAddLevel(gv_g_enemy, "HotSUltraliskBurrowCharge", 1);
    TechTreeUpgradeAddLevel(gv_g_enemy, "ChitinousPlating", 1);
    TechTreeUpgradeAddLevel(gv_g_enemy, "CausticSpray", 1);
}

void gf_initenemyunitattackcapabilities () {
    // Automatic Variable Declarations
    // Implementation
    gv_g_swarmunitsattackair[0] = "SwarmLeviathanLz";
    gv_g_swarmunitsattackair[1] = "SwarmBrutaliskLz";
    gv_g_swarmunitsattackair[2] = "SwarmCorruptorLz";
    gv_g_swarmunitsattackair[3] = "SwarmHydraliskLz";
    gv_g_swarmunitsattackair[4] = "SwarmMutaliskLz";
    gv_g_swarmunitsattackair[5] = "SwarmQueenLz";
    gv_g_swarmunitsattackair[6] = "SwarmViperLz";
    gv_g_swarmunitsattackair[7] = "SwarmWasplingLz";
    gv_g_swarmunitsattackground[0] = "SwarmLeviathanLz";
    gv_g_swarmunitsattackground[1] = "SwarmAberrationLz";
    gv_g_swarmunitsattackground[2] = "SwarmBroodLordLz";
    gv_g_swarmunitsattackground[3] = "SwarmBroodlingLz";
    gv_g_swarmunitsattackground[4] = "SwarmBrutaliskLz";
    gv_g_swarmunitsattackground[5] = "SwarmHunterBanelingLz";
    gv_g_swarmunitsattackground[6] = "SwarmHydraliskLz";
    gv_g_swarmunitsattackground[7] = "SwarmMitoscarabLz";
    gv_g_swarmunitsattackground[8] = "SwarmMitoscarabMediumLz";
    gv_g_swarmunitsattackground[9] = "SwarmMitoscarabSmallLz";
    gv_g_swarmunitsattackground[10] = "SwarmMutaliskLz";
    gv_g_swarmunitsattackground[11] = "SwarmOmegaliskLz";
    gv_g_swarmunitsattackground[12] = "SwarmQueenLz";
    gv_g_swarmunitsattackground[13] = "SwarmRaptorlingLz";
    gv_g_swarmunitsattackground[14] = "SwarmRavagerLz";
    gv_g_swarmunitsattackground[15] = "SwarmRoachLz";
    gv_g_swarmunitsattackground[16] = "SwarmTanklingLz";
    gv_g_swarmunitsattackground[17] = "SwarmUltraliskLz";
    gv_g_swarmunitsattackground[18] = "SwarmWasplingLz";
    gv_g_swarmunitsattackground[19] = "SwarmZerglingLz";
}

void gf_disableenemyburrow () {
    // Automatic Variable Declarations
    // Implementation
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestedAbominationDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowBanelingDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHunterDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHotSSplitterlingBigDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHotSSplitterlingMediumDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowBlightbringerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowBrutaliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowImpaler", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("HotSBurrowVileDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestedExploderDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowBroodMotherDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaMirrorImageDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHydraliskImpalerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHydraliskLurkerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestorTerranDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowLurkerMPDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowMutatorAmonDehakaDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowMutatorAmonDehakaMirrorImageDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowNoxiousDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowPrimalHydraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowPrimalRoachDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowPrimalUltraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowPrimalZerglingDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowRavasaurDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowTorrasqueDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowACVirophageDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaDroneDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaHydraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaHydraliskLevel2Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaHydraliskLevel3Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaRavasaurDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaRoachDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaRoachLevel2Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaRoachLevel3Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaUltraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaUltraliskLevel2Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaUltraliskLevel3Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaZerglingDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaZerglingLevel2Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDehakaZerglingLevel3Down", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHydraliskEvolvedDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowImpalerAbathurDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowImpalerDehakaDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowLocustNestDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowRavagerAbathurDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowRedstoneSalamanderDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowSIInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowSIInfestedMarineDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowSIInfestedTrooperDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowSIVolatileInfestedDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowStukovInfestedBansheeDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowToxicNestDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("DefilerMPBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowDroneDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("HHMagPrepMorph", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("HHMercStarportMorph", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHunterKillerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHydraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowNovaInfestedBansheeDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestedCivilianDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestedTerranCampaignDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("InfestedStukovCoopBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowInfestorDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("K5KerriganBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("LabTurretBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowLurkerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("MutatorAmonKerriganBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("MutatorAmonZagaraBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowOmegaliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowQueenDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowQueenDownCoop", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowRavagerDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("ReaverBurrowDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("RedstoneLavaCritterBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("RedstoneLavaCritterInjuredBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHotSCorpserDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowRoachDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("SIBurrowDroneDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowSwarmQueenDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHugeSwarmQueenDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowLargeSwarmQueenDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("Val03QueenOfBladesBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowUltraliskDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowZaGaraDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("ZagaraVoidCoopBurrow", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowZerglingCarbotDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHotSRaptorDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowHotSSwarmlingDown", 0), false);
    TechTreeAbilityAllow(gv_g_enemy, AbilityCommand("BurrowZerglingDown", 0), false);
}

void gf_initalliances () {
    // Automatic Variable Declarations
    // Implementation
    libCOMI_gf_SetPlayerGroupAlliance(gv_g_activeplayersplusally, libNtve_ge_AllianceSetting_AllyWithSharedVision);
    libNtve_gf_SetAllianceAspectForPlayerGroup(gv_g_activeplayers, c_allianceIdPushable, true);
    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        libNtve_gf_SetPlayerGroupAlliance(gv_g_activeplayers, libNtve_ge_AllianceSetting_AllyWithSharedVisionControlAndSpending);
    }

}

void gf_initallbuildingsdeaddialog () {
    // Automatic Variable Declarations
    // Implementation
    DialogCreate(600, 117, c_anchorTop, 0, 0, true);
    gv_g_allbuildingsdeaddialog = DialogLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_g_allbuildingsdeaddialog, 400, 50, c_anchorTopLeft, 100, 41, StringExternal("Param/Value/9B569CF8"), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_g_allbuildingsdeaddilabel = DialogControlLastCreated();
    libNtve_gf_CreateDialogItemLabel(gv_g_allbuildingsdeaddialog, 50, 50, c_anchorTopRight, 100, 50, StringToText(""), ColorWithAlpha(0,0,0,0), false, 2.0);
    gv_g_allbuildingsdeadditimer = DialogControlLastCreated();
}

void gf_initdefensepointpings () {
    // Variable Declarations
    int lv__pingdurationseconds;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__pingdurationseconds = 30;

    // Implementation
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(1134796180), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 90.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(788266754), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 0.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(445186026), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, 180.0);
    libNtve_gf_CreatePingFacingAngle(PlayerGroupAll(), "PingArrow", PointFromId(734070339), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv__pingdurationseconds, -90.0);
}

void gf_initminingstations () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto4B3A0AA0_g;

    // Variable Initialization

    // Implementation
    auto4B3A0AA0_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto4B3A0AA0_g, lv__p);
        if (lv__p < 0) { break; }
        lib1_gf_createunitatpoint("MiningStationPlayerLz", PointFromId(393756790), lv__p, c_unitCreateIgnorePlacement);
        UnitGroupAdd(gv_g_playerminingstations, UnitLastCreated());
        UnitControlGroupAddUnit(lv__p, 2, UnitLastCreated());
    }
    lib1_gf_createunitatpoint("MiningStationAllyLz", PointFromId(393756790), gv_g_ally, c_unitCreateIgnorePlacement);
    gv_g_allyminingstation = UnitLastCreated();
    TriggerEnable(gt_allyminingstationselected, true);
}

void gf_initmisc () {
    // Automatic Variable Declarations
    // Implementation
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeTeamResourceButton, false);
    libLbty_gf_EnableDisablePingPanel(true, PlayerGroupAll());
}

void gf_initplayergroups () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    const int autoA8169E44_ae = 8;
    const int autoA8169E44_ai = 1;
    int auto89935255_ae;
    const int auto89935255_ai = 1;

    // Variable Initialization

    // Implementation
    lv__p = 1;
    for ( ; ( (autoA8169E44_ai >= 0 && lv__p <= autoA8169E44_ae) || (autoA8169E44_ai < 0 && lv__p >= autoA8169E44_ae) ) ; lv__p += autoA8169E44_ai ) {
        if (lib1_gf_istrue(PlayerGroupHasPlayer(PlayerGroupActive(), lv__p))) {
            PlayerGroupAdd(gv_g_activeplayers, lv__p);
        }

    }
    if (lib1_gf_istrue(lib1_gv_testmultiplayerlocally)) {
        auto89935255_ae = lib1_gv_testmultiplayerlocallynumplayers;
        lv__p = 2;
        for ( ; ( (auto89935255_ai >= 0 && lv__p <= auto89935255_ae) || (auto89935255_ai < 0 && lv__p >= auto89935255_ae) ) ; lv__p += auto89935255_ai ) {
            PlayerGroupAdd(gv_g_activeplayers, lv__p);
            PlayerSetRace(lv__p, "Terr");
        }
    }

    libNtve_gf_AddPlayerGroupToPlayerGroup(gv_g_activeplayers, gv_g_activeplayersplusally);
    PlayerGroupAdd(gv_g_activeplayersplusally, gv_g_ally);
    PlayerGroupAdd(gv_g_enemyplayergroup, gv_g_enemy);
}

void gf_initregionandpointvars () {
    // Automatic Variable Declarations
    // Implementation
    gv_g_enemyspawnrandom4[0] = RegionFromId(14);
    gv_g_enemyspawnrandom4[1] = RegionFromId(19);
    gv_g_enemyspawnrandom4[2] = RegionFromId(21);
    gv_g_enemyspawnrandom4[3] = RegionFromId(23);
    gv_g_enemyspawnrandom4diag[0] = RegionFromId(25);
    gv_g_enemyspawnrandom4diag[1] = RegionFromId(28);
    gv_g_enemyspawnrandom4diag[2] = RegionFromId(31);
    gv_g_enemyspawnrandom4diag[3] = RegionFromId(15);
    gv_g_enemyspawnrandom8[0] = RegionFromId(14);
    gv_g_enemyspawnrandom8[1] = RegionFromId(25);
    gv_g_enemyspawnrandom8[2] = RegionFromId(19);
    gv_g_enemyspawnrandom8[3] = RegionFromId(28);
    gv_g_enemyspawnrandom8[4] = RegionFromId(21);
    gv_g_enemyspawnrandom8[5] = RegionFromId(31);
    gv_g_enemyspawnrandom8[6] = RegionFromId(23);
    gv_g_enemyspawnrandom8[7] = RegionFromId(15);
    gv_g_enemyspawnrandom4diagpoint[0] = PointFromId(833331447);
    gv_g_enemyspawnrandom4diagpoint[1] = PointFromId(1372290180);
    gv_g_enemyspawnrandom4diagpoint[2] = PointFromId(777528751);
    gv_g_enemyspawnrandom4diagpoint[3] = PointFromId(509698823);
    gv_g_enemyspawncore4[0] = RegionFromId(5);
    gv_g_enemyspawncore4[1] = RegionFromId(6);
    gv_g_enemyspawncore4[2] = RegionFromId(7);
    gv_g_enemyspawncore4[3] = RegionFromId(8);
}

trigger auto_gf_initroundtimerdialog_Trigger = null;

void gf_initroundtimerdialog () {
    if (auto_gf_initroundtimerdialog_Trigger == null) {
        auto_gf_initroundtimerdialog_Trigger = TriggerCreate("auto_gf_initroundtimerdialog_TriggerFunc");
    }

    TriggerExecute(auto_gf_initroundtimerdialog_Trigger, false, false);
}

bool auto_gf_initroundtimerdialog_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    lib2_gf_ur_init(true, gv_g_activeplayers, SoundLink("AnnounceWaveLz", -1), 40);
    Wait(gv_g_secondstilroundtimershows, c_timeReal);
    lib1_gf_cleartextmessageareaforallusers(c_messageAreaDirective);
    lib2_gf_ur_startfirstround(120);
    return true;
}

trigger auto_gf_inittextmessage_Trigger = null;

void gf_inittextmessage () {
    if (auto_gf_inittextmessage_Trigger == null) {
        auto_gf_inittextmessage_Trigger = TriggerCreate("auto_gf_inittextmessage_TriggerFunc");
    }

    TriggerExecute(auto_gf_inittextmessage_Trigger, false, false);
}

bool auto_gf_inittextmessage_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    lib1_gf_playsoundforallplayers(SoundLink("AnnounceWaveLz", -1));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaDirective, StringExternal("Param/Value/17E7CD71"));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/4DB04D59"));
    Wait(gv_g_secondstilroundtimershows, c_timeReal);
    lib1_gf_cleartextmessageareaforallusers(c_messageAreaDirective);
    return true;
}

void gf_initmultiplayerraces () {
    // Automatic Variable Declarations
    // Implementation
    lib1_gv_testmultiplayerlocallyraces[2] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[3] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[4] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[5] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[6] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[7] = "Terr";
    lib1_gv_testmultiplayerlocallyraces[8] = "Terr";
}

void gf_inittestrace () {
    // Automatic Variable Declarations
    // Implementation
    PlayerSetRace(1, "Prot");
}

void gf_preinittest () {
    // Automatic Variable Declarations
    // Implementation
    if (lib1_gf_istrue(lib1_gv_test)) {
        gf_inittestrace();
        gf_initmultiplayerraces();
    }

}

void gf_inittestmisc () {
    // Variable Declarations
    region lv__r;
    unit lv__u;
    int lv__p;

    // Automatic Variable Declarations
    unitgroup auto751E9E39_g;
    int auto751E9E39_u;

    // Variable Initialization
    lv__r = RegionEntireMap();

    // Implementation
    auto751E9E39_g = UnitGroup(null, gv_g_enemy, lv__r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto751E9E39_u = UnitGroupCount(auto751E9E39_g, c_unitCountAll);
    for (;; auto751E9E39_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto751E9E39_g, auto751E9E39_u);
        if (lv__u == null) { break; }
        AIAttackWaveUseUnit(gv_g_enemy, lv__u);
    }
    AIAttackWaveSetTargetPoint(gv_g_enemy, PointFromId(393756790));
    AIAttackWaveSend(gv_g_enemy, 0, false);
}

void gf_inittestvision () {
    // Automatic Variable Declarations
    // Implementation
    VisRevealArea(1, RegionEntireMap(), 0.0, false);
}

void gf_inittestupgrades () {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__d = "";

    // Implementation
    TechTreeUpgradeAddLevel(1, "NeuralParasite", 1);
    TechTreeUpgradeAddLevel(1, "HotSUltraliskBurrowCharge", 1);
    TechTreeUpgradeAddLevel(1, "ChitinousPlating", 1);
    TechTreeUpgradeAddLevel(1, "CausticSpray", 1);
}

void gf_inittestresources () {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
}

void gf_viewcode (playergroup lp_pg, unitfilter lp_uf, string lp_ut) {
    // Variable Declarations
    int lv__p;
    unit lv__u;
    unitfilter lv__uf;
    unitgroup lv__ugtmp;
    unitgroup lv__ug;

    // Automatic Variable Declarations
    playergroup auto58FB6D5D_g;
    unitgroup auto0D0FA1C9_g;
    int auto0D0FA1C9_u;

    // Variable Initialization
    lv__uf = UnitFilter(0, 0, 0, 0);
    lv__ugtmp = UnitGroupEmpty();
    lv__ug = UnitGroupEmpty();

    // Implementation
    auto58FB6D5D_g = lp_pg;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto58FB6D5D_g, lv__p);
        if (lv__p < 0) { break; }
        lv__ugtmp = UnitGroup(lp_ut, lv__p, RegionEntireMap(), lp_uf, 0);
        UnitGroupAddUnitGroup(lv__ug, lv__ugtmp);
    }
    auto0D0FA1C9_g = lv__ug;
    auto0D0FA1C9_u = UnitGroupCount(auto0D0FA1C9_g, c_unitCountAll);
    for (;; auto0D0FA1C9_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto0D0FA1C9_g, auto0D0FA1C9_u);
        if (lv__u == null) { break; }
    }
}

bool gf_canspawnlonglastingunits (unit lp_u) {
    // Variable Declarations
    string lv__ut;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__ut = UnitGetType(lp_u);

    // Implementation
    return ((lv__ut == "Sentry") || (lv__ut == "OrbitalCommandLz") || (lv__ut == "Oracle"));
}

bool gf_shouldignoreunitfortrackingcasualty (unit lp_u) {
    // Variable Declarations
    string lv__ut;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__ut = UnitGetType(lp_u);

    // Implementation
    return ((lv__ut == "StartingSCVLz") || (lv__ut == "Interceptor") || (lv__ut == "Nuke") || lib1_gf_and2((lv__ut == "Battlecruiser"), EventUnitDamageDeathCheck(c_deathTypeRemove)));
}

void gf_endgame (int lp__got) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto1AA263FA_g;

    // Variable Initialization

    // Implementation
    auto1AA263FA_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto1AA263FA_g, lv__p);
        if (lv__p < 0) { break; }
        GameOver(lv__p, c_gameOverDefeat, true, true);
    }
}

void gf_updateincomebutton (bool lp_showorhide) {
    // Variable Declarations
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto4E37EA50_g;

    // Variable Initialization

    // Implementation
    auto4E37EA50_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto4E37EA50_g, lv__p);
        if (lv__p < 0) { break; }
        UnitAbilityShow(lib1_gf_findoneunitbytypeforplayer("MiningStationPlayerLz", lv__p), "UpgradeMiningLz", lp_showorhide);
    }
}

void gf_updatesalvagebutton (bool lp_showorhide) {
    // Variable Declarations
    unit lv__u;
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto345D06F6_g;
    unitgroup auto6801389D_g;
    int auto6801389D_u;

    // Variable Initialization

    // Implementation
    auto345D06F6_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto345D06F6_g, lv__p);
        if (lv__p < 0) { break; }
        auto6801389D_g = UnitGroup(null, lv__p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0);
        auto6801389D_u = UnitGroupCount(auto6801389D_g, c_unitCountAll);
        for (;; auto6801389D_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(auto6801389D_g, auto6801389D_u);
            if (lv__u == null) { break; }
            UnitAbilityShow(lv__u, "SalvageLz", lp_showorhide);
        }
    }
}

void gf_startallbuildingsdeadtimer () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_g_allbuildingsdeaddialog, PlayerGroupAll(), true);
    TimerStart(gv_g_allbuildingsdeadtimer, 40.0, false, c_timeReal);
    libNtve_gf_SetDialogItemText(gv_g_allbuildingsdeadditimer, FixedToText(TimerGetRemaining(gv_g_allbuildingsdeadtimer), 0), PlayerGroupAll());
}

void gf_stopallbuildingsdeadtimer () {
    // Automatic Variable Declarations
    // Implementation
    DialogSetVisible(gv_g_allbuildingsdeaddialog, PlayerGroupAll(), false);
    libNtve_gf_StopTimer(gv_g_allbuildingsdeadtimer);
}

void gf_healplayers () {
    // Variable Declarations
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup autoEEC9AF18_g;
    int autoEEC9AF18_u;

    // Variable Initialization

    // Implementation
    autoEEC9AF18_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoEEC9AF18_u = UnitGroupCount(autoEEC9AF18_g, c_unitCountAll);
    for (;; autoEEC9AF18_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoEEC9AF18_g, autoEEC9AF18_u);
        if (lv__u == null) { break; }
        UnitSetPropertyFixed(lv__u, c_unitPropLifePercent, 100.0);
        UnitSetPropertyFixed(lv__u, c_unitPropShieldsPercent, 100.0);
        if (gf_canspawnlonglastingunits(lv__u)) {
            UnitBehaviorAdd(lv__u, "DisableEnergyRegenLz", lv__u, 1);
        }
        else {
            UnitSetPropertyFixed(lv__u, c_unitPropEnergyPercent, 100.0);
        }
    }
}

void gf_refillmagazines () {
    // Variable Declarations
    unit lv__u;
    int lv__curmagazinecount;
    int lv__maxmagazinecount;
    int lv__magazinecounttoadd;
    int lv__i;

    // Automatic Variable Declarations
    unitgroup auto53046DB9_ugtmp;
    unitgroup auto53046DB9_ug;
    playergroup auto53046DB9_g;
    int auto53046DB9_p;
    int auto53046DB9_ui;
    const int auto9297DC47_ae = 5;
    const int auto9297DC47_ai = 1;

    // Variable Initialization

    // Implementation
    auto53046DB9_ugtmp = UnitGroupEmpty();
    auto53046DB9_ug = UnitGroupEmpty();
    auto53046DB9_g = gv_g_activeplayers;
    auto53046DB9_p = -1;
    while (true) {
        auto53046DB9_p = PlayerGroupNextPlayer(auto53046DB9_g, auto53046DB9_p);
        if (auto53046DB9_p < 0) { break; }

        auto53046DB9_ugtmp = UnitGroup("Carrier", auto53046DB9_p, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        UnitGroupAddUnitGroup(auto53046DB9_ug, auto53046DB9_ugtmp);
    }
    auto53046DB9_ui = UnitGroupCount(auto53046DB9_ug, c_unitCountAll);
    for (;; auto53046DB9_ui -= 1) {
        lv__u = UnitGroupUnitFromEnd(auto53046DB9_ug, auto53046DB9_ui);
        if (lv__u == null) { break; }
        lv__curmagazinecount = UnitMagazineCount(lv__u, "CarrierHangar");
        lv__maxmagazinecount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "CarrierHangar", "MaxCount", UnitGetOwner(lv__u));
        lv__magazinecounttoadd = (lv__maxmagazinecount - lv__curmagazinecount);
        UnitMagazineArm(lv__u, AbilityCommand("CarrierHangar", 0), lv__magazinecounttoadd);
        lv__i = 1;
        for ( ; ( (auto9297DC47_ai >= 0 && lv__i <= auto9297DC47_ae) || (auto9297DC47_ai < 0 && lv__i >= auto9297DC47_ae) ) ; lv__i += auto9297DC47_ai ) {
            UnitIssueOrder(lv__u, Order(AbilityCommand("HangarQueue5", 0)), c_orderQueueReplace);
        }
        ;
    }
}

void gf_refundcasualties () {
    // Variable Declarations
    int lv__p;
    int lv__m;

    // Automatic Variable Declarations
    playergroup auto40193604_g;

    // Variable Initialization

    // Implementation
    auto40193604_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto40193604_g, lv__p);
        if (lv__p < 0) { break; }
        lv__m = gv_g_casualtymineralsbyplayer[lv__p];
        if ((lv__m > 0)) {
            PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperAdd, lv__m);
            TextExpressionSetToken("Param/Expression/1A4171E1", "c", lib1_gv_colorminerals);
            TextExpressionSetToken("Param/Expression/1A4171E1", "m", IntToText(lv__m));
            lib1_gf_messageuser(TextExpressionAssemble("Param/Expression/1A4171E1"), lv__p);
            gv_g_casualtymineralsbyplayer[lv__p] = 0;
        }

    }
}

void gf_rewardincome () {
    // Variable Declarations
    int lv__p;
    int lv__income;

    // Automatic Variable Declarations
    playergroup auto06B769C2_g;

    // Variable Initialization

    // Implementation
    auto06B769C2_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto06B769C2_g, lv__p);
        if (lv__p < 0) { break; }
        lv__income = gv_g_incomeperplayer[lv__p];
        PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperAdd, lv__income);
        TextExpressionSetToken("Param/Expression/66A7E84E", "c", lib1_gv_colorminerals);
        TextExpressionSetToken("Param/Expression/66A7E84E", "income", IntToText(lv__income));
        lib1_gf_messageuser(TextExpressionAssemble("Param/Expression/66A7E84E"), lv__p);
    }
}

void gf_spawnstartingbuilders () {
    // Variable Declarations
    int lv__p;
    point lv__spawnpoint;
    string lv__s;
    unit lv__startingbuilder;

    // Automatic Variable Declarations
    playergroup autoC7EBF335_g;

    // Variable Initialization
    lv__s = "";

    // Implementation
    autoC7EBF335_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(autoC7EBF335_g, lv__p);
        if (lv__p < 0) { break; }
        lv__startingbuilder = gv_g_startingbuildersperplayer[lv__p];
        if ((lv__startingbuilder != null)) {
            UnitRevive(lv__startingbuilder);
            lv__spawnpoint = PointFromName(("init unit - p" + IntToString(lv__p)));
            UnitSetPosition(lv__startingbuilder, lv__spawnpoint, false);
            libCOMI_gf_PingMinimapCampaign(PlayerGroupSingle(lv__p), lv__spawnpoint, 5.0, Color(0.00, 100.00, 0.00));
            lib1_gf_messageuser(StringExternal("Param/Value/E7320DEC"), lv__p);
        }

    }
}

void gf_refillenergyforunitspawningcasters () {
    // Variable Declarations
    unit lv__u;

    // Automatic Variable Declarations
    unitgroup autoABFD7FE6_g;
    int autoABFD7FE6_u;

    // Variable Initialization

    // Implementation
    autoABFD7FE6_g = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoABFD7FE6_u = UnitGroupCount(autoABFD7FE6_g, c_unitCountAll);
    for (;; autoABFD7FE6_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoABFD7FE6_g, autoABFD7FE6_u);
        if (lv__u == null) { break; }
        if (gf_canspawnlonglastingunits(lv__u)) {
            UnitSetPropertyFixed(lv__u, c_unitPropEnergyPercent, 100.0);
            UnitBehaviorRemove(lv__u, "DisableEnergyRegenLz", 1);
        }

    }
}

void gf_killstartingbuilders () {
    // Variable Declarations
    int lv__p;
    unit lv__u;
    point lv__pos;

    // Automatic Variable Declarations
    playergroup auto6F5D92C2_g;

    // Variable Initialization

    // Implementation
    auto6F5D92C2_g = gv_g_activeplayers;
    lv__p = -1;
    while (true) {
        lv__p = PlayerGroupNextPlayer(auto6F5D92C2_g, lv__p);
        if (lv__p < 0) { break; }
        lv__u = gv_g_startingbuildersperplayer[lv__p];
        if ((lv__u != null)) {
            lv__pos = UnitGetPosition(lv__u);
            PlayerCreateEffectPoint(gv_g_ally, "ExitEffectLz", lv__pos);
            lib1_gf_playsoundatpoint(SoundLink("Ultralisk_Death_Fall_Impact", -1), lv__pos);
            UnitKill(lv__u);
        }

    }
}

void gf_round1 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto1DDE61EF_i;
    int autoA751512E_i;

    // Variable Initialization

    // Implementation
    for (auto1DDE61EF_i = 0; auto1DDE61EF_i < 4; auto1DDE61EF_i +=1 )
    {
        lv__r = gv_g_enemyspawncore4[auto1DDE61EF_i];
        lib1_gf_createNunitsatrandompointsinregion(20, "SwarmZerglingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
        ;
    }
    for (autoA751512E_i = 0; autoA751512E_i < 4; autoA751512E_i +=1 )
    {
        lv__r = gv_g_enemyspawnrandom4[autoA751512E_i];
        lib1_gf_createNunitsatrandompointsinregion(20, "SwarmZerglingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
        ;
    }
}

void gf_round2 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto9CA761EF_i;
    int auto59B4B79B_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 2)) {
        for (auto9CA761EF_i = 0; auto9CA761EF_i < 4; auto9CA761EF_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto9CA761EF_i];
            lib1_gf_createNunitsatrandompointsinregion(5, "SwarmRoachLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto59B4B79B_i = 0; auto59B4B79B_i < 4; auto59B4B79B_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto59B4B79B_i];
            lib1_gf_createNunitsatrandompointsinregion(5, "SwarmRoachLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round3 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoAE963AEC_i;
    int auto3C6BA445_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 3)) {
        for (autoAE963AEC_i = 0; autoAE963AEC_i < 8; autoAE963AEC_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom8[autoAE963AEC_i];
            lib1_gf_createNunitsatrandompointsinregion(8, "SwarmRaptorlingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto3C6BA445_i = 0; auto3C6BA445_i < 4; auto3C6BA445_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto3C6BA445_i];
            lib1_gf_createNunitsatrandompointsinregion(4, "SwarmRaptorlingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round4 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto1D155679_i;
    int auto3BAEE856_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 4)) {
        for (auto1D155679_i = 0; auto1D155679_i < 4; auto1D155679_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto1D155679_i];
            lib1_gf_createNunitsatrandompointsinregion(3, "SwarmQueenLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto3BAEE856_i = 0; auto3BAEE856_i < 4; auto3BAEE856_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto3BAEE856_i];
            lib1_gf_createNunitsatrandompointsinregion(3, "SwarmQueenLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round5 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoDA57FF5C_i;
    int auto6B2A9DEC_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 5)) {
        for (autoDA57FF5C_i = 0; autoDA57FF5C_i < 4; autoDA57FF5C_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[autoDA57FF5C_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmAberrationLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto6B2A9DEC_i = 0; auto6B2A9DEC_i < 4; auto6B2A9DEC_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto6B2A9DEC_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmAberrationLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round6 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoB91FA577_i;
    int autoC5B372AF_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 6)) {
        for (autoB91FA577_i = 0; autoB91FA577_i < 4; autoB91FA577_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[autoB91FA577_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmMitoscarabLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (autoC5B372AF_i = 0; autoC5B372AF_i < 4; autoC5B372AF_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[autoC5B372AF_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmMitoscarabLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round7 () {
    // Variable Declarations
    region lv__r;
    int lv__p;

    // Automatic Variable Declarations
    int auto612D3BB2_i;
    int auto2CFD4CED_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 7)) {
        for (auto612D3BB2_i = 0; auto612D3BB2_i < 4; auto612D3BB2_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto612D3BB2_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmTanklingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto2CFD4CED_i = 0; auto2CFD4CED_i < 4; auto2CFD4CED_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto2CFD4CED_i];
            lib1_gf_createNunitsatrandompointsinregion(4, "SwarmTanklingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round8 () {
    // Variable Declarations
    region lv__r;
    point lv__p;

    // Automatic Variable Declarations
    int autoA2014EB3_i;
    int auto66C27B4A_i;
    int auto338439BF_i;
    int autoFA6E8A31_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 8)) {
        for (autoA2014EB3_i = 0; autoA2014EB3_i < 4; autoA2014EB3_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4diag[autoA2014EB3_i];
            lib1_gf_createNunitsatrandompointsinregion(8, "SwarmWasplingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto66C27B4A_i = 0; auto66C27B4A_i < 4; auto66C27B4A_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto66C27B4A_i];
            lib1_gf_createNunitsatrandompointsinregion(6, "SwarmWasplingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto338439BF_i = 0; auto338439BF_i < 4; auto338439BF_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto338439BF_i];
            lib1_gf_createNunitsatrandompointsinregion(4, "SwarmWasplingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (autoFA6E8A31_i = 0; autoFA6E8A31_i < 4; autoFA6E8A31_i +=1 )
        {
            lv__p = gv_g_enemyspawnrandom4diagpoint[autoFA6E8A31_i];
            lib1_gf_createunitatpoint("SwarmOverseerLz", lv__p, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round9 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoA7769358_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 9)) {
        for (autoA7769358_i = 0; autoA7769358_i < 4; autoA7769358_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[autoA7769358_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmDefilerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmInfestorLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round10 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoF572044A_i;
    int autoD929B32E_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround == 10)) {
        for (autoF572044A_i = 0; autoF572044A_i < 4; autoF572044A_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[autoF572044A_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (autoD929B32E_i = 0; autoD929B32E_i < 4; autoD929B32E_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[autoD929B32E_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmBrutaliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round11 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto3D4A1A34_i;
    int auto4013FF3F_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 11)) {
        for (auto3D4A1A34_i = 0; auto3D4A1A34_i < 4; auto3D4A1A34_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto3D4A1A34_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmUltraliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto4013FF3F_i = 0; auto4013FF3F_i < 4; auto4013FF3F_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto4013FF3F_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmUltraliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round12 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoFDD06FD4_i;
    int auto5AFAD84D_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 12)) {
        for (autoFDD06FD4_i = 0; autoFDD06FD4_i < 8; autoFDD06FD4_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom8[autoFDD06FD4_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmCorruptorLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto5AFAD84D_i = 0; auto5AFAD84D_i < 4; auto5AFAD84D_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto5AFAD84D_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmCorruptorLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round13 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto05E643F8_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 13)) {
        for (auto05E643F8_i = 0; auto05E643F8_i < 8; auto05E643F8_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom8[auto05E643F8_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmBroodLordLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round14 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int autoE5D83801_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 14)) {
        for (autoE5D83801_i = 0; autoE5D83801_i < 4; autoE5D83801_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[autoE5D83801_i];
            lib1_gf_createNunitsatrandompointsinregion(5, "SwarmRavagerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round15 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto5A8C3BD7_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround == 15)) {
        for (auto5A8C3BD7_i = 0; auto5A8C3BD7_i < 4; auto5A8C3BD7_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto5A8C3BD7_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOmegaliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round16 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto912955EA_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 16)) {
        for (auto912955EA_i = 0; auto912955EA_i < 4; auto912955EA_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto912955EA_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmViperLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round17 () {
    // Variable Declarations
    region lv__r;

    // Automatic Variable Declarations
    int auto4D4F07ED_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 17)) {
        for (auto4D4F07ED_i = 0; auto4D4F07ED_i < 8; auto4D4F07ED_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom8[auto4D4F07ED_i];
            lib1_gf_createNunitsatrandompointsinregion(3, "SwarmHunterBanelingLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round18 () {
    // Variable Declarations
    region lv__r;
    int lv__p;

    // Automatic Variable Declarations
    playergroup auto856062E9_g;
    int autoBDD4FAA0_i;
    int auto62C453C8_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround == 18)) {
        auto856062E9_g = gv_g_activeplayers;
        lv__p = -1;
        while (true) {
            lv__p = PlayerGroupNextPlayer(auto856062E9_g, lv__p);
            if (lv__p < 0) { break; }
            UnitAbilityShow(lib1_gf_findoneunitbytypeforplayer("MiningStationPlayerLz", lv__p), "UpgradeMiningLz", false);
            UnitAbilityShow(lib1_gf_findoneunitbytypeforplayer("MiningStationPlayerLz", lv__p), "UpgradeMiningDisabledBetweenRoundsLz", false);
        }
    }

    if ((lib2_gv_ur_currentround >= 18)) {
        for (autoBDD4FAA0_i = 0; autoBDD4FAA0_i < 4; autoBDD4FAA0_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[autoBDD4FAA0_i];
            lib1_gf_createNunitsatrandompointsinregion(3, "SwarmHydraliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto62C453C8_i = 0; auto62C453C8_i < 4; auto62C453C8_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto62C453C8_i];
            lib1_gf_createNunitsatrandompointsinregion(2, "SwarmHydraliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round19 () {
    // Variable Declarations
    region lv__r;
    point lv__p;

    // Automatic Variable Declarations
    int autoAA588D3F_i;
    int auto1AB78F71_i;
    int auto698AAFC2_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 19)) {
        for (autoAA588D3F_i = 0; autoAA588D3F_i < 4; autoAA588D3F_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4diag[autoAA588D3F_i];
            lib1_gf_createNunitsatrandompointsinregion(8, "SwarmMutaliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto1AB78F71_i = 0; auto1AB78F71_i < 4; auto1AB78F71_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom4[auto1AB78F71_i];
            lib1_gf_createNunitsatrandompointsinregion(6, "SwarmMutaliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto698AAFC2_i = 0; auto698AAFC2_i < 4; auto698AAFC2_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto698AAFC2_i];
            lib1_gf_createNunitsatrandompointsinregion(4, "SwarmMutaliskLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_round20 () {
    // Variable Declarations
    region lv__r;
    point lv__p;

    // Automatic Variable Declarations
    int auto7C1B9C5E_i;
    int auto290352CB_i;

    // Variable Initialization

    // Implementation
    if ((lib2_gv_ur_currentround >= 20)) {
        for (auto7C1B9C5E_i = 0; auto7C1B9C5E_i < 8; auto7C1B9C5E_i +=1 )
        {
            lv__r = gv_g_enemyspawnrandom8[auto7C1B9C5E_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmOverseerLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
        for (auto290352CB_i = 0; auto290352CB_i < 4; auto290352CB_i +=1 )
        {
            lv__r = gv_g_enemyspawncore4[auto290352CB_i];
            lib1_gf_createNunitsatrandompointsinregion(1, "SwarmLeviathanLz", lv__r, gv_g_enemy, c_unitCreateIgnorePlacement | c_unitCreateIgnoreBirth);
            ;
        }
    }

}

void gf_sendattackwaves () {
    // Variable Declarations
    unit lv__u;
    region lv__r;

    // Automatic Variable Declarations
    int auto574D52F3_i;
    unitgroup autoDCA60C86_g;
    int autoDCA60C86_u;
    int autoEF8CAC69_i;

    // Variable Initialization

    // Implementation
    for (auto574D52F3_i = 0; auto574D52F3_i < 4; auto574D52F3_i +=1 )
    {
        lv__r = gv_g_enemyspawncore4[auto574D52F3_i];
        autoDCA60C86_g = UnitGroup(null, gv_g_enemy, lv__r, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoDCA60C86_u = UnitGroupCount(autoDCA60C86_g, c_unitCountAll);
        for (;; autoDCA60C86_u -= 1) {
            lv__u = UnitGroupUnitFromEnd(autoDCA60C86_g, autoDCA60C86_u);
            if (lv__u == null) { break; }
            AIAttackWaveUseUnit(gv_g_enemy, lv__u);
        }
        AIAttackWaveSetTargetPoint(gv_g_enemy, PointFromId(393756790));
        AIAttackWaveSend(gv_g_enemy, 0, false);
        ;
    }
    for (autoEF8CAC69_i = 0; autoEF8CAC69_i < 8; autoEF8CAC69_i +=1 )
    {
        lv__r = gv_g_enemyspawnrandom8[autoEF8CAC69_i];
        lib1_gf_issueordertoallunitsinregion(OrderTargetingPoint(AbilityCommand("attack", 0), PointFromId(393756790)), lv__r, gv_g_enemy, c_orderQueueAddToFront);
        ;
    }
}

bool gf_swarmunitcanattackair (unit lp_u) {
    // Variable Declarations
    string lv__ut;
    string lv__fut;
    int lv__i;

    // Automatic Variable Declarations
    const int autoCF5D4FE3_ae = 100;
    const int autoCF5D4FE3_ai = 1;

    // Variable Initialization
    lv__ut = UnitGetType(lp_u);

    // Implementation
    lv__i = 1;
    for ( ; ( (autoCF5D4FE3_ai >= 0 && lv__i <= autoCF5D4FE3_ae) || (autoCF5D4FE3_ai < 0 && lv__i >= autoCF5D4FE3_ae) ) ; lv__i += autoCF5D4FE3_ai ) {
        lv__fut = gv_g_swarmunitsattackair[lv__i];
        if ((lv__fut == null)) {
            break;
        }
        else if ((lv__fut == lv__ut)) {
            return true;
        }
    }
    return false;
}

bool gf_swarmunitcanattackground (unit lp_u) {
    // Variable Declarations
    string lv__ut;
    string lv__fut;
    int lv__i;

    // Automatic Variable Declarations
    const int auto3968D6C9_ae = 100;
    const int auto3968D6C9_ai = 1;

    // Variable Initialization
    lv__ut = UnitGetType(lp_u);

    // Implementation
    lv__i = 1;
    for ( ; ( (auto3968D6C9_ai >= 0 && lv__i <= auto3968D6C9_ae) || (auto3968D6C9_ai < 0 && lv__i >= auto3968D6C9_ae) ) ; lv__i += auto3968D6C9_ai ) {
        lv__fut = gv_g_swarmunitsattackground[lv__i];
        if ((lv__fut == null)) {
            break;
        }
        else if ((lv__fut == lv__ut)) {
            return true;
        }
    }
    return false;
}

bool gf_unitisstartingworker (unit lp_u) {
    // Variable Declarations
    string lv__ut;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__ut = UnitGetType(lp_u);

    // Implementation
    return ((lv__ut == "StartingSCVLz") || (lv__ut == "StartingProbeLz"));
}

void gf_trytechlab (int lp_p, unit lp_u, string lp_ut, abilcmd lp_abilitycommand) {
    // Variable Declarations
    int lv__techlabsbefore;
    int lv__techlabsafter;

    // Automatic Variable Declarations
    // Variable Initialization

    // Implementation
    lv__techlabsbefore = TechTreeUnitCount(lp_p, lp_ut, c_techCountQueuedOrBetter);
    UnitIssueOrder(lp_u, OrderTargetingPoint(lp_abilitycommand, UnitGetPosition(lp_u)), c_orderQueueReplace);
    Wait(0.1, c_timeGame);
    lv__techlabsafter = TechTreeUnitCount(lp_p, lp_ut, c_techCountQueuedOrBetter);
    if ((lv__techlabsbefore == lv__techlabsafter)) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(lp_p), StringExternal("Param/Value/7009EB7F"), SoundLink("GenericErrorLz", -1));
    }

}

void gf_updateminingbutton (int lp_p) {
    // Automatic Variable Declarations
    // Implementation
    TextExpressionSetToken("Param/Expression/A8070D49", "mins", IntToText(gv_g_mineralsperincomeupgrade));
    TextExpressionSetToken("Param/Expression/A8070D49", "income", IntToText(gv_g_incomeperplayer[lp_p]));
    libNtve_gf_SetUnitInfoButtonButtonTooltip(lib1_gf_findoneunitbytypeforplayer("MiningStationPlayerLz", lp_p), "UpgradeMiningLz", TextExpressionAssemble("Param/Expression/A8070D49"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: init
//--------------------------------------------------------------------------------------------------
bool gt_init_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    gf_preinittest();
    gf_initplayergroups();
    gf_initalliances();
    gf_initminingstations();
    gf_initmisc();
    gf_initplayers();
    gf_initdefensepointpings();
    gf_inittextmessage();
    gf_initroundtimerdialog();
    gf_initenemyupgrades();
    gf_initregionandpointvars();
    gf_initenemymisc();
    gf_disableenemyburrow();
    gf_initallbuildingsdeaddialog();
    gf_initenemyunitattackcapabilities();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_init_Init () {
    gt_init = TriggerCreate("gt_init_Func");
    TriggerAddEventMapInit(gt_init);
}

//--------------------------------------------------------------------------------------------------
// Trigger: init testing
//--------------------------------------------------------------------------------------------------
bool gt_inittesting_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv__d;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__d = "";

    // Conditions
    if (testConds) {
        if (!(lib1_gf_istrue(lib1_gv_test))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_inittestresources();
    gf_inittestupgrades();
    gf_inittestvision();
    gf_inittestmisc();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_inittesting_Init () {
    gt_inittesting = TriggerCreate("gt_inittesting_Func");
    TriggerAddEventMapInit(gt_inittesting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: complete current round and begin next
//--------------------------------------------------------------------------------------------------
bool gt_completecurrentroundandbeginnext_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__numunitsalive;
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__numunitsalive = lib1_gf_numberofunitsinregion(RegionEntireMap(), gv_g_enemy);
    lv__p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv__p == gv_g_enemy))) {
            return false;
        }

        if (!(lib1_gf_fewerthanNunitsinregionforplayer(1, RegionEntireMap(), gv_g_enemy))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while (gv_g_roundlock) {
        Wait(1.0, c_timeGame);
    }
    gv_g_roundlock = true;
    if (lib1_gf_isfalse(gv_g_roundhandled)) {
        gv_g_roundactive = false;
        gv_g_roundhandled = true;
        gf_stopallbuildingsdeadtimer();
        gf_rewardincome();
        gf_refundcasualties();
        gf_spawnstartingbuilders();
        gf_updatesalvagebutton(true);
        lib2_gf_ur_completecurrentroundandbeginnext();
        gf_updateincomebutton(true);
        gf_healplayers();
        gf_refillmagazines();
    }

    gv_g_roundlock = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_completecurrentroundandbeginnext_Init () {
    gt_completecurrentroundandbeginnext = TriggerCreate("gt_completecurrentroundandbeginnext_Func");
    TriggerAddEventUnitDied(gt_completecurrentroundandbeginnext, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: start round
//--------------------------------------------------------------------------------------------------
bool gt_startround_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lib2_gv_ur_currentround >= 1) && (lib2_gv_ur_currentround <= 20)) {
        gv_g_roundactive = true;
        gv_g_roundhandled = false;
        gf_killstartingbuilders();
        gf_refillenergyforunitspawningcasters();
        gf_updatesalvagebutton(false);
        gf_updateincomebutton(false);
        gf_round1();
        gf_round2();
        gf_round3();
        gf_round4();
        gf_round5();
        gf_round6();
        gf_round7();
        gf_round8();
        gf_round9();
        gf_round10();
        gf_round11();
        gf_round12();
        gf_round13();
        gf_round14();
        gf_round15();
        gf_round16();
        gf_round17();
        gf_round18();
        gf_round19();
        gf_round20();
        gf_sendattackwaves();
        if (lib1_gf_fewerthanNunitsmatchingfilterinregionforeachplayeringroup(2, RegionEntireMap(), gv_g_activeplayers, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0))) {
            gf_startallbuildingsdeadtimer();
        }
    }
    else {
        gf_endgame(c_gameOverVictory);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startround_Init () {
    gt_startround = TriggerCreate("gt_startround_Func");
    TriggerAddEventGeneric(gt_startround, lib2_gv_ur_startround);
}

//--------------------------------------------------------------------------------------------------
// Trigger: all buildings dead timer expires
//--------------------------------------------------------------------------------------------------
bool gt_allbuildingsdeadtimerexpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    lib1_gf_displaydebugmessage(StringExternal("Param/Value/ACC8786A"));
    gf_endgame(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allbuildingsdeadtimerexpires_Init () {
    gt_allbuildingsdeadtimerexpires = TriggerCreate("gt_allbuildingsdeadtimerexpires_Func");
    TriggerAddEventTimer(gt_allbuildingsdeadtimerexpires, gv_g_allbuildingsdeadtimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: all ally units dead
//--------------------------------------------------------------------------------------------------
bool gt_allallyunitsdead_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__p;
    int lv__fp;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__u = EventUnit();
    lv__p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }

        if (!(lib1_gf_fewerthanNunitsinregionforeachplayeringroup(2, RegionEntireMap(), gv_g_activeplayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_endgame(c_gameOverDefeat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allallyunitsdead_Init () {
    gt_allallyunitsdead = TriggerCreate("gt_allallyunitsdead_Func");
    TriggerAddEventUnitDied(gt_allallyunitsdead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ally building is created
//--------------------------------------------------------------------------------------------------
bool gt_allybuildingiscreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnitProgressUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }

        if (!(lib1_gf_istrue(UnitTypeTestAttribute(UnitGetType(lv__u), c_unitAttributeStructure)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (lib1_gf_istrue(gv_g_roundactive)) {
        UnitAbilityShow(lv__u, "SalvageLz", false);
    }

    if (lib1_gf_timerisactive(gv_g_allbuildingsdeadtimer)) {
        gf_stopallbuildingsdeadtimer();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allybuildingiscreated_Init () {
    gt_allybuildingiscreated = TriggerCreate("gt_allybuildingiscreated_Func");
    TriggerAddEventUnitConstructProgress(gt_allybuildingiscreated, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ally unit is created
//--------------------------------------------------------------------------------------------------
bool gt_allyunitiscreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = UnitGetOwner(EventUnitCreatedUnit());
    lv__u = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (lib1_gf_istrue(gv_g_roundactive) && lib1_gf_istrue(UnitAbilityExists(lv__u, "SalvageLz"))) {
        UnitAbilityShow(lv__u, "SalvageLz", false);
    }

    if (gf_canspawnlonglastingunits(lv__u) && lib1_gf_isfalse(gv_g_roundactive)) {
        UnitBehaviorAdd(lv__u, "DisableEnergyRegenLz", lv__u, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allyunitiscreated_Init () {
    gt_allyunitiscreated = TriggerCreate("gt_allyunitiscreated_Func");
    TriggerAddEventUnitCreated(gt_allyunitiscreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: certain ally unit is morphed
//--------------------------------------------------------------------------------------------------
bool gt_certainallyunitismorphed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = UnitGetOwner(EventUnit());
    lv__u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (lib1_gf_isfalse(gv_g_roundactive)) {
        UnitBehaviorAdd(lv__u, "DisableEnergyRegenLz", lv__u, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_certainallyunitismorphed_Init () {
    gt_certainallyunitismorphed = TriggerCreate("gt_certainallyunitismorphed_Func");
    TriggerAddEventUnitAbility(gt_certainallyunitismorphed, null, AbilityCommand("MorphToOrbitalCommandCommandCenterLz", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: check all buildings dead timer
//--------------------------------------------------------------------------------------------------
bool gt_checkallbuildingsdeadtimer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }

        if (!(lib1_gf_istrue(UnitTypeTestAttribute(UnitGetType(lv__u), c_unitAttributeStructure)))) {
            return false;
        }

        if (!(lib1_gf_fewerthanNunitsmatchingfilterinregionforeachplayeringroup(2, RegionEntireMap(), gv_g_activeplayers, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))))) {
            return false;
        }

        if (!(lib1_gf_timerisnotactive(gv_g_allbuildingsdeadtimer))) {
            return false;
        }

        if (!(lib1_gf_istrue(gv_g_roundactive))) {
            return false;
        }

        if (!(lib1_gf_atleastNunitsinregionmatchingfilterforanyplayeringroup(1, RegionEntireMap(), gv_g_activeplayers, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    gf_startallbuildingsdeadtimer();
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_checkallbuildingsdeadtimer_Init () {
    gt_checkallbuildingsdeadtimer = TriggerCreate("gt_checkallbuildingsdeadtimer_Func");
    TriggerAddEventUnitDied(gt_checkallbuildingsdeadtimer, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: track casualty minerals
//--------------------------------------------------------------------------------------------------
bool gt_trackcasualtyminerals_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__cost;
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }

        if (!(lib1_gf_istrue(gv_g_roundactive))) {
            return false;
        }

        if (!((!(gf_shouldignoreunitfortrackingcasualty(lv__u))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__cost = UnitTypeGetCost(UnitGetType(lv__u), c_unitCostMinerals);
    gv_g_casualtymineralsbyplayer[lv__p] = gv_g_casualtymineralsbyplayer[lv__p] + lv__cost;
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_trackcasualtyminerals_Init () {
    gt_trackcasualtyminerals = TriggerCreate("gt_trackcasualtyminerals_Func");
    TriggerAddEventUnitDied(gt_trackcasualtyminerals, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: update all buildings dead timer
//--------------------------------------------------------------------------------------------------
bool gt_updateallbuildingsdeadtimer_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!(lib1_gf_timerisactive(gv_g_allbuildingsdeadtimer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SetDialogItemText(gv_g_allbuildingsdeadditimer, FixedToText(TimerGetRemaining(gv_g_allbuildingsdeadtimer), 0), PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_updateallbuildingsdeadtimer_Init () {
    gt_updateallbuildingsdeadtimer = TriggerCreate("gt_updateallbuildingsdeadtimer_Func");
    TriggerAddEventTimer(gt_updateallbuildingsdeadtimer, lib1_gv_everysecond);
}

//--------------------------------------------------------------------------------------------------
// Trigger: order idle units
//--------------------------------------------------------------------------------------------------
bool gt_orderidleunits_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    unitgroup lv__allystructures;
    unitgroup lv__allyairunits;
    unitgroup lv__allygroundunits;
    unitgroup lv__allyhiddengroundunits;
    unitgroup lv__allyunits;
    point lv__pos;

    // Automatic Variable Declarations
    unitgroup autoB016B25C_g;
    int autoB016B25C_u;

    // Variable Initialization
    lv__allystructures = UnitGroupAlliance(gv_g_enemy, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv__allyairunits = UnitGroupAlliance(gv_g_enemy, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterAir), 0, (1 << c_targetFilterMissile) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv__allygroundunits = UnitGroupAlliance(gv_g_enemy, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv__allyhiddengroundunits = UnitGroupAlliance(gv_g_enemy, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter((1 << c_targetFilterGround), (1 << (c_targetFilterHidden - 32)), (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterBuried) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv__allyunits = UnitGroupAlliance(gv_g_enemy, c_unitAllianceEnemy, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);

    // Actions
    if (!runActions) {
        return true;
    }

    autoB016B25C_g = UnitGroupIdle(gv_g_enemy, false);
    autoB016B25C_u = UnitGroupCount(autoB016B25C_g, c_unitCountAll);
    for (;; autoB016B25C_u -= 1) {
        lv__u = UnitGroupUnitFromEnd(autoB016B25C_g, autoB016B25C_u);
        if (lv__u == null) { break; }
        lv__pos = UnitGetPosition(lv__u);
        if (gf_swarmunitcanattackground(lv__u) && (UnitGroupCount(lv__allystructures, c_unitCountAll) >= 1)) {
            UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv__allystructures, lv__pos))), c_orderQueueReplace);
        }
        else if (gf_swarmunitcanattackair(lv__u) && (UnitGroupCount(lv__allyairunits, c_unitCountAll) >= 1)) {
            UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv__allyairunits, lv__pos))), c_orderQueueReplace);
        }
        else if (gf_swarmunitcanattackground(lv__u) && (UnitGroupCount(lv__allygroundunits, c_unitCountAll) >= 1)) {
            UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv__allygroundunits, lv__pos))), c_orderQueueReplace);
        }
        else if (gf_swarmunitcanattackground(lv__u) && (UnitGroupCount(lv__allyhiddengroundunits, c_unitCountAll) >= 1)) {
            UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(UnitGroupClosestToPoint(lv__allyhiddengroundunits, lv__pos))), c_orderQueueReplace);
        }
        else if (lib1_gf_istrue(true)) {
            UnitIssueOrder(lv__u, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(UnitGroupClosestToPoint(lv__allyunits, lv__pos))), c_orderQueueReplace);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_orderidleunits_Init () {
    gt_orderidleunits = TriggerCreate("gt_orderidleunits_Func");
    TriggerAddEventTimer(gt_orderidleunits, gv_g_idlechecktimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: build barracks tech lab
//--------------------------------------------------------------------------------------------------
bool gt_buildbarrackstechlab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__u = EventUnit();
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_trytechlab(lv__p, lv__u, "TechLabBarracksLz", AbilityCommand("BarracksAddOnsLz", 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildbarrackstechlab_Init () {
    gt_buildbarrackstechlab = TriggerCreate("gt_buildbarrackstechlab_Func");
    TriggerAddEventUnitAbility(gt_buildbarrackstechlab, null, AbilityCommand("BarracksBuildTechLabLz", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: build factory tech lab
//--------------------------------------------------------------------------------------------------
bool gt_buildfactorytechlab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__u = EventUnit();
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_trytechlab(lv__p, lv__u, "TechLabFactoryLz", AbilityCommand("FactoryAddOnsLz", 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildfactorytechlab_Init () {
    gt_buildfactorytechlab = TriggerCreate("gt_buildfactorytechlab_Func");
    TriggerAddEventUnitAbility(gt_buildfactorytechlab, null, AbilityCommand("FactoryBuildTechLabLz", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: build starport tech lab
//--------------------------------------------------------------------------------------------------
bool gt_buildstarporttechlab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__u;
    int lv__p;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__u = EventUnit();
    lv__p = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    gf_trytechlab(lv__p, lv__u, "TechLabStarportLz", AbilityCommand("StarportAddOnsLz", 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_buildstarporttechlab_Init () {
    gt_buildstarporttechlab = TriggerCreate("gt_buildstarporttechlab_Func");
    TriggerAddEventUnitAbility(gt_buildstarporttechlab, null, AbilityCommand("StarportBuildTechLabLz", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: ally mining station selected
//--------------------------------------------------------------------------------------------------
bool gt_allyminingstationselected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv__u, lv__p, false);
    lib1_gf_selectoneunitoftypeatpointforplayer(PointFromId(393756790), lv__p, "MiningStationPlayerLz");
    lib1_gf_playsoundforplayer(SoundLink("MiningStationSelectedLz", -1), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_allyminingstationselected_Init () {
    gt_allyminingstationselected = TriggerCreate("gt_allyminingstationselected_Func");
    TriggerEnable(gt_allyminingstationselected, false);
    TriggerAddEventUnitSelected(gt_allyminingstationselected, UnitRefFromVariable("gv_g_allyminingstation"), c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: starting worker placement after build
//--------------------------------------------------------------------------------------------------
bool gt_startingworkerplacementafterbuild_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv__builder;
    unit lv__building;
    string lv__buildingtype;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__builder = EventUnit();
    lv__building = EventUnitProgressUnit();
    lv__buildingtype = libNtve_gf_TriggeringProgressUnitType();

    // Conditions
    if (testConds) {
        if (!(gf_unitisstartingworker(lv__builder))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv__builder, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv__building), UnitTypeGetProperty(lv__buildingtype, c_unitPropRadius), -90.0)), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_startingworkerplacementafterbuild_Init () {
    gt_startingworkerplacementafterbuild = TriggerCreate("gt_startingworkerplacementafterbuild_Func");
    TriggerAddEventUnitConstructProgress(gt_startingworkerplacementafterbuild, null, c_unitProgressStageComplete);
}

//--------------------------------------------------------------------------------------------------
// Trigger: upgrade mining
//--------------------------------------------------------------------------------------------------
bool gt_upgrademining_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    gv_g_incomeperplayer[lv__p] = gv_g_incomeperplayer[lv__p] + gv_g_mineralsperincomeupgrade;
    gf_updateminingbutton(lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_upgrademining_Init () {
    gt_upgrademining = TriggerCreate("gt_upgrademining_Func");
    TriggerAddEventUnitAbility(gt_upgrademining, null, AbilityCommand("UpgradeMiningLz", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: salvage
//--------------------------------------------------------------------------------------------------
bool gt_salvage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    unit lv__u;
    int lv__c;

    // Automatic Variable Declarations
    // Variable Initialization
    lv__p = EventPlayer();
    lv__u = EventUnit();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }

        if (!(lib1_gf_isfalse(gv_g_roundactive))) {
            return false;
        }

        if (!((!(gf_shouldignoreunitfortrackingcasualty(lv__u))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv__c = UnitTypeGetCost(UnitGetType(lv__u), c_unitCostMinerals);
    PlayerModifyPropertyInt(lv__p, c_playerPropMinerals, c_playerPropOperAdd, lv__c);
    TextExpressionSetToken("Param/Expression/C5210C3F", "c", lib1_gv_colorminerals);
    TextExpressionSetToken("Param/Expression/C5210C3F", "m", IntToText(lv__c));
    lib1_gf_messageuser(TextExpressionAssemble("Param/Expression/C5210C3F"), lv__p);
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_salvage_Init () {
    gt_salvage = TriggerCreate("gt_salvage_Func");
    TriggerAddEventUnitDied(gt_salvage, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: teleport units in spawn area
//--------------------------------------------------------------------------------------------------
bool gt_teleportunitsinspawnarea_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv__p;
    int lv__fp;
    unit lv__fu;

    // Automatic Variable Declarations
    playergroup auto181ED8D7_g;
    unitgroup autoC6CDB3E7_g;
    int autoC6CDB3E7_u;

    // Variable Initialization
    lv__p = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(lib1_gf_playerisingroup(lv__p, gv_g_activeplayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto181ED8D7_g = gv_g_activeplayers;
    lv__fp = -1;
    while (true) {
        lv__fp = PlayerGroupNextPlayer(auto181ED8D7_g, lv__fp);
        if (lv__fp < 0) { break; }
        autoC6CDB3E7_g = UnitGroup(null, lv__fp, RegionFromId(13), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        autoC6CDB3E7_u = UnitGroupCount(autoC6CDB3E7_g, c_unitCountAll);
        for (;; autoC6CDB3E7_u -= 1) {
            lv__fu = UnitGroupUnitFromEnd(autoC6CDB3E7_g, autoC6CDB3E7_u);
            if (lv__fu == null) { break; }
            lib1_gf_messageuserthrottled(StringExternal("Param/Value/9671E757"), "forbidden-rocks", lv__fp, 20);
            UnitSetPosition(lv__fu, PointFromName(("init unit - p" + IntToString(lv__fp))), false);
            if (lib1_gf_istrue(gv_g_roundactive)) {
                UnitBehaviorAdd(lv__fu, "RockTeleportStunLz", lv__fu, 1);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void gt_teleportunitsinspawnarea_Init () {
    gt_teleportunitsinspawnarea = TriggerCreate("gt_teleportunitsinspawnarea_Func");
    TriggerAddEventUnitRegion(gt_teleportunitsinspawnarea, null, RegionFromId(13), true);
}

//--------------------------------------------------------------------------------------------------
// Trigger Initialization
//--------------------------------------------------------------------------------------------------
void InitTriggers () {
    gt_init_Init();
    gt_inittesting_Init();
    gt_completecurrentroundandbeginnext_Init();
    gt_startround_Init();
    gt_allbuildingsdeadtimerexpires_Init();
    gt_allallyunitsdead_Init();
    gt_allybuildingiscreated_Init();
    gt_allyunitiscreated_Init();
    gt_certainallyunitismorphed_Init();
    gt_checkallbuildingsdeadtimer_Init();
    gt_trackcasualtyminerals_Init();
    gt_updateallbuildingsdeadtimer_Init();
    gt_orderidleunits_Init();
    gt_buildbarrackstechlab_Init();
    gt_buildfactorytechlab_Init();
    gt_buildstarporttechlab_Init();
    gt_allyminingstationselected_Init();
    gt_startingworkerplacementafterbuild_Init();
    gt_upgrademining_Init();
    gt_salvage_Init();
    gt_teleportunitsinspawnarea_Init();
}

//--------------------------------------------------------------------------------------------------
// Map Initialization
//--------------------------------------------------------------------------------------------------
void InitMap () {
    InitLibs();
    InitGlobals();
    InitTriggers();
}
